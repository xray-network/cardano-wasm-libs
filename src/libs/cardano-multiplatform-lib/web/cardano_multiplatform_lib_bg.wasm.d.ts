/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_cip36delegation_free: (a: number, b: number) => void;
export const cip36delegation_to_cbor_bytes: (a: number) => [number, number];
export const cip36delegation_to_canonical_cbor_bytes: (a: number) => [number, number];
export const cip36delegation_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip36delegation_to_cbor_hex: (a: number) => [number, number];
export const cip36delegation_to_canonical_cbor_hex: (a: number) => [number, number];
export const cip36delegation_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip36delegation_to_json: (a: number) => [number, number, number, number];
export const cip36delegation_to_js_value: (a: number) => [number, number, number];
export const cip36delegation_from_json: (a: number, b: number) => [number, number, number];
export const cip36delegation_voting_pub_key: (a: number) => number;
export const cip36delegation_weight: (a: number) => number;
export const cip36delegation_new: (a: number, b: number) => number;
export const __wbg_cip36delegationdistribution_free: (a: number, b: number) => void;
export const cip36delegationdistribution_to_cbor_bytes: (a: number) => [number, number];
export const cip36delegationdistribution_to_canonical_cbor_bytes: (a: number) => [number, number];
export const cip36delegationdistribution_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip36delegationdistribution_to_cbor_hex: (a: number) => [number, number];
export const cip36delegationdistribution_to_canonical_cbor_hex: (a: number) => [number, number];
export const cip36delegationdistribution_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip36delegationdistribution_to_json: (a: number) => [number, number, number, number];
export const cip36delegationdistribution_to_js_value: (a: number) => [number, number, number];
export const cip36delegationdistribution_from_json: (a: number, b: number) => [number, number, number];
export const cip36delegationdistribution_new_weighted: (a: number) => number;
export const cip36delegationdistribution_new_legacy: (a: number) => number;
export const cip36delegationdistribution_kind: (a: number) => number;
export const cip36delegationdistribution_as_weighted: (a: number) => number;
export const cip36delegationdistribution_as_legacy: (a: number) => number;
export const __wbg_cip36delegationlist_free: (a: number, b: number) => void;
export const cip36delegationlist_new: () => number;
export const cip36delegationlist_len: (a: number) => number;
export const cip36delegationlist_get: (a: number, b: number) => number;
export const cip36delegationlist_add: (a: number, b: number) => void;
export const __wbg_cip36deregistrationcbor_free: (a: number, b: number) => void;
export const cip36deregistrationcbor_to_json: (a: number) => [number, number, number, number];
export const cip36deregistrationcbor_to_js_value: (a: number) => [number, number, number];
export const cip36deregistrationcbor_from_json: (a: number, b: number) => [number, number, number];
export const cip36deregistrationcbor_key_deregistration: (a: number) => number;
export const cip36deregistrationcbor_deregistration_witness: (a: number) => number;
export const cip36deregistrationcbor_new: (a: number, b: number) => number;
export const __wbg_cip36deregistrationwitness_free: (a: number, b: number) => void;
export const cip36deregistrationwitness_to_cbor_bytes: (a: number) => [number, number];
export const cip36deregistrationwitness_to_canonical_cbor_bytes: (a: number) => [number, number];
export const cip36deregistrationwitness_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip36deregistrationwitness_to_cbor_hex: (a: number) => [number, number];
export const cip36deregistrationwitness_to_canonical_cbor_hex: (a: number) => [number, number];
export const cip36deregistrationwitness_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip36deregistrationwitness_to_json: (a: number) => [number, number, number, number];
export const cip36deregistrationwitness_to_js_value: (a: number) => [number, number, number];
export const cip36deregistrationwitness_from_json: (a: number, b: number) => [number, number, number];
export const cip36deregistrationwitness_stake_witness: (a: number) => number;
export const cip36deregistrationwitness_new: (a: number) => number;
export const __wbg_cip36keyderegistration_free: (a: number, b: number) => void;
export const cip36keyderegistration_to_cbor_bytes: (a: number) => [number, number];
export const cip36keyderegistration_to_canonical_cbor_bytes: (a: number) => [number, number];
export const cip36keyderegistration_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip36keyderegistration_to_cbor_hex: (a: number) => [number, number];
export const cip36keyderegistration_to_canonical_cbor_hex: (a: number) => [number, number];
export const cip36keyderegistration_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip36keyderegistration_to_json: (a: number) => [number, number, number, number];
export const cip36keyderegistration_to_js_value: (a: number) => [number, number, number];
export const cip36keyderegistration_from_json: (a: number, b: number) => [number, number, number];
export const cip36keyderegistration_stake_credential: (a: number) => number;
export const cip36keyderegistration_nonce: (a: number) => bigint;
export const cip36keyderegistration_set_voting_purpose: (a: number, b: bigint) => void;
export const cip36keyderegistration_voting_purpose: (a: number) => bigint;
export const __wbg_cip36keyregistration_free: (a: number, b: number) => void;
export const cip36keyregistration_to_cbor_bytes: (a: number) => [number, number];
export const cip36keyregistration_to_canonical_cbor_bytes: (a: number) => [number, number];
export const cip36keyregistration_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip36keyregistration_to_cbor_hex: (a: number) => [number, number];
export const cip36keyregistration_to_canonical_cbor_hex: (a: number) => [number, number];
export const cip36keyregistration_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip36keyregistration_to_json: (a: number) => [number, number, number, number];
export const cip36keyregistration_to_js_value: (a: number) => [number, number, number];
export const cip36keyregistration_from_json: (a: number, b: number) => [number, number, number];
export const cip36keyregistration_delegation: (a: number) => number;
export const cip36keyregistration_stake_credential: (a: number) => number;
export const cip36keyregistration_payment_address: (a: number) => number;
export const cip36keyregistration_nonce: (a: number) => bigint;
export const cip36keyregistration_set_voting_purpose: (a: number, b: bigint) => void;
export const cip36keyregistration_voting_purpose: (a: number) => bigint;
export const __wbg_cip36registrationcbor_free: (a: number, b: number) => void;
export const cip36registrationcbor_to_json: (a: number) => [number, number, number, number];
export const cip36registrationcbor_to_js_value: (a: number) => [number, number, number];
export const cip36registrationcbor_from_json: (a: number, b: number) => [number, number, number];
export const cip36registrationcbor_key_registration: (a: number) => number;
export const cip36registrationcbor_registration_witness: (a: number) => number;
export const cip36registrationcbor_new: (a: number, b: number) => number;
export const __wbg_cip36registrationwitness_free: (a: number, b: number) => void;
export const cip36registrationwitness_to_cbor_bytes: (a: number) => [number, number];
export const cip36registrationwitness_to_canonical_cbor_bytes: (a: number) => [number, number];
export const cip36registrationwitness_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip36registrationwitness_to_cbor_hex: (a: number) => [number, number];
export const cip36registrationwitness_to_canonical_cbor_hex: (a: number) => [number, number];
export const cip36registrationwitness_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip36registrationwitness_to_json: (a: number) => [number, number, number, number];
export const cip36registrationwitness_to_js_value: (a: number) => [number, number, number];
export const cip36registrationwitness_from_json: (a: number, b: number) => [number, number, number];
export const cip36registrationwitness_stake_witness: (a: number) => number;
export const cip36registrationwitness_new: (a: number) => number;
export const __wbg_cip25metadata_free: (a: number, b: number) => void;
export const cip25metadata_to_json: (a: number) => [number, number, number, number];
export const cip25metadata_to_js_value: (a: number) => [number, number, number];
export const cip25metadata_from_json: (a: number, b: number) => [number, number, number];
export const cip25metadata_to_cbor_bytes: (a: number) => [number, number];
export const cip25metadata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip25metadata_key_721: (a: number) => number;
export const cip25metadata_new: (a: number) => number;
export const __wbg_cip25chunkablestring_free: (a: number, b: number) => void;
export const cip25chunkablestring_to_cbor_bytes: (a: number) => [number, number];
export const cip25chunkablestring_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip25chunkablestring_to_cbor_hex: (a: number) => [number, number];
export const cip25chunkablestring_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip25chunkablestring_to_json: (a: number) => [number, number, number, number];
export const cip25chunkablestring_to_js_value: (a: number) => [number, number, number];
export const cip25chunkablestring_from_json: (a: number, b: number) => [number, number, number];
export const cip25chunkablestring_new_single: (a: number) => number;
export const cip25chunkablestring_new_chunked: (a: number) => number;
export const cip25chunkablestring_kind: (a: number) => number;
export const cip25chunkablestring_as_single: (a: number) => number;
export const cip25chunkablestring_as_chunked: (a: number) => number;
export const __wbg_cip25filesdetails_free: (a: number, b: number) => void;
export const cip25filesdetails_to_cbor_bytes: (a: number) => [number, number];
export const cip25filesdetails_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip25filesdetails_to_cbor_hex: (a: number) => [number, number];
export const cip25filesdetails_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip25filesdetails_to_json: (a: number) => [number, number, number, number];
export const cip25filesdetails_to_js_value: (a: number) => [number, number, number];
export const cip25filesdetails_from_json: (a: number, b: number) => [number, number, number];
export const cip25filesdetails_name: (a: number) => number;
export const cip25filesdetails_media_type: (a: number) => number;
export const cip25filesdetails_src: (a: number) => number;
export const cip25filesdetails_new: (a: number, b: number, c: number) => number;
export const __wbg_filesdetailslist_free: (a: number, b: number) => void;
export const filesdetailslist_new: () => number;
export const filesdetailslist_len: (a: number) => number;
export const filesdetailslist_get: (a: number, b: number) => number;
export const filesdetailslist_add: (a: number, b: number) => void;
export const __wbg_cip25metadatadetails_free: (a: number, b: number) => void;
export const cip25metadatadetails_to_cbor_bytes: (a: number) => [number, number];
export const cip25metadatadetails_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip25metadatadetails_to_cbor_hex: (a: number) => [number, number];
export const cip25metadatadetails_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip25metadatadetails_to_json: (a: number) => [number, number, number, number];
export const cip25metadatadetails_to_js_value: (a: number) => [number, number, number];
export const cip25metadatadetails_from_json: (a: number, b: number) => [number, number, number];
export const cip25metadatadetails_name: (a: number) => number;
export const cip25metadatadetails_image: (a: number) => number;
export const cip25metadatadetails_set_media_type: (a: number, b: number) => void;
export const cip25metadatadetails_media_type: (a: number) => number;
export const cip25metadatadetails_set_description: (a: number, b: number) => void;
export const cip25metadatadetails_description: (a: number) => number;
export const cip25metadatadetails_set_files: (a: number, b: number) => void;
export const cip25metadatadetails_files: (a: number) => number;
export const cip25metadatadetails_new: (a: number, b: number) => number;
export const __wbg_cip25string64_free: (a: number, b: number) => void;
export const cip25string64_to_cbor_bytes: (a: number) => [number, number];
export const cip25string64_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip25string64_to_cbor_hex: (a: number) => [number, number];
export const cip25string64_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip25string64_to_json: (a: number) => [number, number, number, number];
export const cip25string64_to_js_value: (a: number) => [number, number, number];
export const cip25string64_from_json: (a: number, b: number) => [number, number, number];
export const cip25string64_get: (a: number) => [number, number];
export const __wbg_cip25string64list_free: (a: number, b: number) => void;
export const cip25string64list_new: () => number;
export const cip25string64list_len: (a: number) => number;
export const cip25string64list_get: (a: number, b: number) => number;
export const cip25string64list_add: (a: number, b: number) => void;
export const cip25metadata_to_metadata: (a: number) => [number, number, number];
export const cip25metadata_from_metadata: (a: number) => [number, number, number];
export const cip25metadata_add_to_metadata: (a: number, b: number) => [number, number];
export const cip25string64_new: (a: number, b: number) => [number, number, number];
export const cip25string64_to_str: (a: number) => [number, number];
export const cip25string64_get_str: (a: number) => [number, number];
export const cip25chunkablestring_from_string: (a: number, b: number) => number;
export const cip25chunkablestring_to_string: (a: number) => [number, number];
export const __wbg_cip25minimetadatadetails_free: (a: number, b: number) => void;
export const cip25minimetadatadetails_to_json: (a: number) => [number, number, number, number];
export const cip25minimetadatadetails_to_js_value: (a: number) => [number, number, number];
export const cip25minimetadatadetails_from_json: (a: number, b: number) => [number, number, number];
export const cip25minimetadatadetails_new: () => number;
export const cip25minimetadatadetails_set_name: (a: number, b: number) => void;
export const cip25minimetadatadetails_name: (a: number) => number;
export const cip25minimetadatadetails_set_image: (a: number, b: number) => void;
export const cip25minimetadatadetails_image: (a: number) => number;
export const cip25minimetadatadetails_loose_parse: (a: number) => [number, number, number];
export const __wbg_cip25labelmetadata_free: (a: number, b: number) => void;
export const cip25labelmetadata_to_cbor_bytes: (a: number) => [number, number];
export const cip25labelmetadata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const cip25labelmetadata_to_cbor_hex: (a: number) => [number, number];
export const cip25labelmetadata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const cip25labelmetadata_to_json: (a: number) => [number, number, number, number];
export const cip25labelmetadata_to_js_value: (a: number) => [number, number, number];
export const cip25labelmetadata_from_json: (a: number, b: number) => [number, number, number];
export const cip25labelmetadata_new: (a: number) => number;
export const cip25labelmetadata_set: (a: number, b: number, c: number, d: number) => [number, number, number];
export const cip25labelmetadata_get: (a: number, b: number, c: number) => number;
export const cip25labelmetadata_version: (a: number) => number;
export const auxiliarydata_new: () => number;
export const auxiliarydata_metadata: (a: number) => number;
export const auxiliarydata_native_scripts: (a: number) => number;
export const auxiliarydata_plutus_v1_scripts: (a: number) => number;
export const auxiliarydata_plutus_v2_scripts: (a: number) => number;
export const auxiliarydata_add_metadata: (a: number, b: number) => void;
export const auxiliarydata_add_native_scripts: (a: number, b: number) => void;
export const auxiliarydata_add_plutus_v1_scripts: (a: number, b: number) => void;
export const auxiliarydata_add_plutus_v2_scripts: (a: number, b: number) => void;
export const auxiliarydata_add: (a: number, b: number) => void;
export const __wbg_auxiliarydata_free: (a: number, b: number) => void;
export const auxiliarydata_to_cbor_bytes: (a: number) => [number, number];
export const auxiliarydata_to_canonical_cbor_bytes: (a: number) => [number, number];
export const auxiliarydata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const auxiliarydata_to_cbor_hex: (a: number) => [number, number];
export const auxiliarydata_to_canonical_cbor_hex: (a: number) => [number, number];
export const auxiliarydata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const auxiliarydata_to_json: (a: number) => [number, number, number, number];
export const auxiliarydata_to_js_value: (a: number) => [number, number, number];
export const auxiliarydata_from_json: (a: number, b: number) => [number, number, number];
export const auxiliarydata_new_shelley: (a: number) => number;
export const auxiliarydata_new_shelley_ma: (a: number) => number;
export const auxiliarydata_new_conway: (a: number) => number;
export const auxiliarydata_kind: (a: number) => number;
export const auxiliarydata_as_shelley: (a: number) => number;
export const auxiliarydata_as_shelley_ma: (a: number) => number;
export const auxiliarydata_as_conway: (a: number) => number;
export const __wbg_conwayformatauxdata_free: (a: number, b: number) => void;
export const conwayformatauxdata_to_cbor_bytes: (a: number) => [number, number];
export const conwayformatauxdata_to_canonical_cbor_bytes: (a: number) => [number, number];
export const conwayformatauxdata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const conwayformatauxdata_to_cbor_hex: (a: number) => [number, number];
export const conwayformatauxdata_to_canonical_cbor_hex: (a: number) => [number, number];
export const conwayformatauxdata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const conwayformatauxdata_to_json: (a: number) => [number, number, number, number];
export const conwayformatauxdata_to_js_value: (a: number) => [number, number, number];
export const conwayformatauxdata_from_json: (a: number, b: number) => [number, number, number];
export const conwayformatauxdata_set_metadata: (a: number, b: number) => void;
export const conwayformatauxdata_metadata: (a: number) => number;
export const conwayformatauxdata_set_native_scripts: (a: number, b: number) => void;
export const conwayformatauxdata_native_scripts: (a: number) => number;
export const conwayformatauxdata_set_plutus_v1_scripts: (a: number, b: number) => void;
export const conwayformatauxdata_plutus_v1_scripts: (a: number) => number;
export const conwayformatauxdata_set_plutus_v2_scripts: (a: number, b: number) => void;
export const conwayformatauxdata_plutus_v2_scripts: (a: number) => number;
export const conwayformatauxdata_set_plutus_v3_scripts: (a: number, b: number) => void;
export const conwayformatauxdata_plutus_v3_scripts: (a: number) => number;
export const conwayformatauxdata_new: () => number;
export const __wbg_shelleymaformatauxdata_free: (a: number, b: number) => void;
export const shelleymaformatauxdata_to_cbor_bytes: (a: number) => [number, number];
export const shelleymaformatauxdata_to_canonical_cbor_bytes: (a: number) => [number, number];
export const shelleymaformatauxdata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const shelleymaformatauxdata_to_cbor_hex: (a: number) => [number, number];
export const shelleymaformatauxdata_to_canonical_cbor_hex: (a: number) => [number, number];
export const shelleymaformatauxdata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const shelleymaformatauxdata_to_json: (a: number) => [number, number, number, number];
export const shelleymaformatauxdata_to_js_value: (a: number) => [number, number, number];
export const shelleymaformatauxdata_from_json: (a: number, b: number) => [number, number, number];
export const shelleymaformatauxdata_transaction_metadata: (a: number) => number;
export const shelleymaformatauxdata_auxiliary_scripts: (a: number) => number;
export const shelleymaformatauxdata_new: (a: number, b: number) => number;
export const __wbg_inputbuilderresult_free: (a: number, b: number) => void;
export const __wbg_singleinputbuilder_free: (a: number, b: number) => void;
export const singleinputbuilder_new: (a: number, b: number) => number;
export const singleinputbuilder_from_transaction_unspent_output: (a: number) => number;
export const singleinputbuilder_payment_key: (a: number) => [number, number, number];
export const singleinputbuilder_native_script: (a: number, b: number, c: number) => [number, number, number];
export const singleinputbuilder_plutus_script: (a: number, b: number, c: number, d: number) => [number, number, number];
export const singleinputbuilder_plutus_script_inline_datum: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_transactionoutputbuilder_free: (a: number, b: number) => void;
export const transactionoutputbuilder_new: () => number;
export const transactionoutputbuilder_with_address: (a: number, b: number) => number;
export const transactionoutputbuilder_with_communication_data: (a: number, b: number) => number;
export const transactionoutputbuilder_with_data: (a: number, b: number) => number;
export const transactionoutputbuilder_with_reference_script: (a: number, b: number) => number;
export const transactionoutputbuilder_next: (a: number) => [number, number, number];
export const __wbg_transactionoutputamountbuilder_free: (a: number, b: number) => void;
export const transactionoutputamountbuilder_with_value: (a: number, b: number) => number;
export const transactionoutputamountbuilder_with_asset_and_min_required_coin: (a: number, b: number, c: bigint) => [number, number, number];
export const transactionoutputamountbuilder_build: (a: number) => [number, number, number];
export const __wbg_singleoutputbuilderresult_free: (a: number, b: number) => void;
export const singleoutputbuilderresult_new: (a: number) => number;
export const singleoutputbuilderresult_output: (a: number) => number;
export const singleoutputbuilderresult_communication_datum: (a: number) => number;
export const __wbg_withdrawalbuilderresult_free: (a: number, b: number) => void;
export const __wbg_singlewithdrawalbuilder_free: (a: number, b: number) => void;
export const singlewithdrawalbuilder_new: (a: number, b: bigint) => number;
export const singlewithdrawalbuilder_payment_key: (a: number) => [number, number, number];
export const singlewithdrawalbuilder_native_script: (a: number, b: number, c: number) => [number, number, number];
export const singlewithdrawalbuilder_plutus_script: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_plutusscriptwitness_free: (a: number, b: number) => void;
export const plutusscriptwitness_new_script: (a: number) => number;
export const plutusscriptwitness_new_ref: (a: number) => number;
export const plutusscriptwitness_hash: (a: number) => number;
export const __wbg_partialplutuswitness_free: (a: number, b: number) => void;
export const partialplutuswitness_new: (a: number, b: number) => number;
export const partialplutuswitness_script: (a: number) => number;
export const partialplutuswitness_data: (a: number) => number;
export const __wbg_inputaggregatewitnessdata_free: (a: number, b: number) => void;
export const inputaggregatewitnessdata_plutus_data: (a: number) => number;
export const __wbg_requiredwitnessset_free: (a: number, b: number) => void;
export const requiredwitnessset_add_vkey_key_hash: (a: number, b: number) => void;
export const requiredwitnessset_add_bootstrap: (a: number, b: number) => void;
export const requiredwitnessset_add_script_ref: (a: number, b: number) => void;
export const requiredwitnessset_add_script_hash: (a: number, b: number) => void;
export const requiredwitnessset_add_plutus_datum_hash: (a: number, b: number) => void;
export const requiredwitnessset_add_redeemer_tag: (a: number, b: number) => void;
export const requiredwitnessset_add_all: (a: number, b: number) => void;
export const requiredwitnessset_new: () => number;
export const requiredwitnessset_withdrawal_required_wits: (a: number, b: number) => void;
export const __wbg_transactionwitnesssetbuilder_free: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_add_vkey: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_add_bootstrap: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_add_script: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_get_native_script: (a: number) => number;
export const transactionwitnesssetbuilder_get_plutus_v1_script: (a: number) => number;
export const transactionwitnesssetbuilder_get_plutus_v2_script: (a: number) => number;
export const transactionwitnesssetbuilder_add_plutus_datum: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_get_plutus_datum: (a: number) => number;
export const transactionwitnesssetbuilder_add_redeemer: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_get_redeemer: (a: number) => number;
export const transactionwitnesssetbuilder_add_required_wits: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_new: () => number;
export const transactionwitnesssetbuilder_add_existing: (a: number, b: number) => void;
export const transactionwitnesssetbuilder_build: (a: number) => number;
export const transactionwitnesssetbuilder_remaining_wits: (a: number) => number;
export const transactionwitnesssetbuilder_try_build: (a: number) => [number, number, number];
export const transactionwitnesssetbuilder_merge_fake_witness: (a: number, b: number) => void;
export const __wbg_nativescriptwitnessinfo_free: (a: number, b: number) => void;
export const nativescriptwitnessinfo_num_signatures: (a: number) => number;
export const nativescriptwitnessinfo_vkeys: (a: number) => number;
export const nativescriptwitnessinfo_assume_signature_count: () => number;
export const hash_auxiliary_data: (a: number) => number;
export const hash_transaction: (a: number) => number;
export const hash_plutus_data: (a: number) => number;
export const hash_script_data: (a: number, b: number, c: number) => number;
export const calc_script_data_hash: (a: number, b: number, c: number, d: number) => [number, number, number];
export const calc_script_data_hash_from_witness: (a: number, b: number) => [number, number, number];
export const __wbg_bootstrapwitness_free: (a: number, b: number) => void;
export const bootstrapwitness_to_cbor_bytes: (a: number) => [number, number];
export const bootstrapwitness_to_canonical_cbor_bytes: (a: number) => [number, number];
export const bootstrapwitness_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const bootstrapwitness_to_cbor_hex: (a: number) => [number, number];
export const bootstrapwitness_to_canonical_cbor_hex: (a: number) => [number, number];
export const bootstrapwitness_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const bootstrapwitness_to_json: (a: number) => [number, number, number, number];
export const bootstrapwitness_to_js_value: (a: number) => [number, number, number];
export const bootstrapwitness_from_json: (a: number, b: number) => [number, number, number];
export const bootstrapwitness_public_key: (a: number) => number;
export const bootstrapwitness_signature: (a: number) => number;
export const bootstrapwitness_chain_code: (a: number) => [number, number];
export const bootstrapwitness_attributes: (a: number) => number;
export const bootstrapwitness_new: (a: number, b: number, c: number, d: number, e: number) => [number, number, number];
export const __wbg_kessignature_free: (a: number, b: number) => void;
export const kessignature_to_cbor_bytes: (a: number) => [number, number];
export const kessignature_to_canonical_cbor_bytes: (a: number) => [number, number];
export const kessignature_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const kessignature_to_cbor_hex: (a: number) => [number, number];
export const kessignature_to_canonical_cbor_hex: (a: number) => [number, number];
export const kessignature_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const kessignature_to_json: (a: number) => [number, number, number, number];
export const kessignature_to_js_value: (a: number) => [number, number, number];
export const kessignature_from_json: (a: number, b: number) => [number, number, number];
export const kessignature_get: (a: number) => [number, number];
export const __wbg_nonce_free: (a: number, b: number) => void;
export const nonce_to_cbor_bytes: (a: number) => [number, number];
export const nonce_to_canonical_cbor_bytes: (a: number) => [number, number];
export const nonce_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const nonce_to_cbor_hex: (a: number) => [number, number];
export const nonce_to_canonical_cbor_hex: (a: number) => [number, number];
export const nonce_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const nonce_to_json: (a: number) => [number, number, number, number];
export const nonce_to_js_value: (a: number) => [number, number, number];
export const nonce_from_json: (a: number, b: number) => [number, number, number];
export const nonce_new_identity: () => number;
export const nonce_new_hash: (a: number) => number;
export const nonce_kind: (a: number) => number;
export const nonce_as_hash: (a: number) => number;
export const __wbg_vrfcert_free: (a: number, b: number) => void;
export const vrfcert_to_cbor_bytes: (a: number) => [number, number];
export const vrfcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const vrfcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const vrfcert_to_cbor_hex: (a: number) => [number, number];
export const vrfcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const vrfcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const vrfcert_to_json: (a: number) => [number, number, number, number];
export const vrfcert_to_js_value: (a: number) => [number, number, number];
export const vrfcert_from_json: (a: number, b: number) => [number, number, number];
export const vrfcert_output: (a: number) => [number, number];
export const vrfcert_proof: (a: number) => [number, number];
export const vrfcert_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const __wbg_vkeywitness_free: (a: number, b: number) => void;
export const vkeywitness_to_cbor_bytes: (a: number) => [number, number];
export const vkeywitness_to_canonical_cbor_bytes: (a: number) => [number, number];
export const vkeywitness_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const vkeywitness_to_cbor_hex: (a: number) => [number, number];
export const vkeywitness_to_canonical_cbor_hex: (a: number) => [number, number];
export const vkeywitness_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const vkeywitness_to_json: (a: number) => [number, number, number, number];
export const vkeywitness_to_js_value: (a: number) => [number, number, number];
export const vkeywitness_from_json: (a: number, b: number) => [number, number, number];
export const vkeywitness_vkey: (a: number) => number;
export const vkeywitness_ed25519_signature: (a: number) => number;
export const vkeywitness_new: (a: number, b: number) => number;
export const __wbg_networkinfo_free: (a: number, b: number) => void;
export const networkinfo_new: (a: number, b: number) => number;
export const networkinfo_network_id: (a: number) => number;
export const networkinfo_protocol_magic: (a: number) => number;
export const networkinfo_testnet: () => number;
export const networkinfo_mainnet: () => number;
export const networkinfo_preview: () => number;
export const networkinfo_preprod: () => number;
export const networkinfo_sancho_testnet: () => number;
export const __wbg_byrongenesisredeem_free: (a: number, b: number) => void;
export const byrongenesisredeem_new: (a: number, b: number) => number;
export const byrongenesisredeem_txid: (a: number) => number;
export const byrongenesisredeem_address: (a: number) => number;
export const genesis_txid_byron: (a: number, b: number) => number;
export const genesis_txid_shelley: (a: number) => number;
export const __wbg_constrplutusdata_free: (a: number, b: number) => void;
export const constrplutusdata_to_cbor_bytes: (a: number) => [number, number];
export const constrplutusdata_to_canonical_cbor_bytes: (a: number) => [number, number];
export const constrplutusdata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const constrplutusdata_to_cbor_hex: (a: number) => [number, number];
export const constrplutusdata_to_canonical_cbor_hex: (a: number) => [number, number];
export const constrplutusdata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const constrplutusdata_to_json: (a: number) => [number, number, number, number];
export const constrplutusdata_to_js_value: (a: number) => [number, number, number];
export const constrplutusdata_from_json: (a: number, b: number) => [number, number, number];
export const constrplutusdata_alternative: (a: number) => bigint;
export const constrplutusdata_fields: (a: number) => number;
export const constrplutusdata_new: (a: bigint, b: number) => number;
export const plutusdata_to_cardano_node_format: (a: number) => number;
export const __wbg_plutusmap_free: (a: number, b: number) => void;
export const plutusmap_to_cbor_bytes: (a: number) => [number, number];
export const plutusmap_to_canonical_cbor_bytes: (a: number) => [number, number];
export const plutusmap_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const plutusmap_to_cbor_hex: (a: number) => [number, number];
export const plutusmap_to_canonical_cbor_hex: (a: number) => [number, number];
export const plutusmap_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const plutusmap_new: () => number;
export const plutusmap_len: (a: number) => number;
export const plutusmap_is_empty: (a: number) => number;
export const plutusmap_set: (a: number, b: number, c: number) => void;
export const plutusmap_get: (a: number, b: number) => number;
export const plutusmap_get_all: (a: number, b: number) => number;
export const plutusmap_keys: (a: number) => number;
export const __wbg_plutusscript_free: (a: number, b: number) => void;
export const plutusscript_from_v1: (a: number) => number;
export const plutusscript_from_v2: (a: number) => number;
export const plutusscript_from_v3: (a: number) => number;
export const plutusscript_hash: (a: number) => number;
export const plutusscript_as_v1: (a: number) => number;
export const plutusscript_as_v2: (a: number) => number;
export const plutusscript_as_v3: (a: number) => number;
export const plutusscript_version: (a: number) => number;
export const plutusv1script_hash: (a: number) => number;
export const plutusv2script_hash: (a: number) => number;
export const plutusv3script_hash: (a: number) => number;
export const plutusv1script_to_raw_bytes: (a: number) => [number, number];
export const plutusv1script_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const plutusv1script_to_hex: (a: number) => [number, number];
export const plutusv1script_from_hex: (a: number, b: number) => [number, number, number];
export const plutusv2script_to_raw_bytes: (a: number) => [number, number];
export const plutusv2script_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const plutusv2script_to_hex: (a: number) => [number, number];
export const plutusv2script_from_hex: (a: number, b: number) => [number, number, number];
export const plutusv3script_to_raw_bytes: (a: number) => [number, number];
export const plutusv3script_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const plutusv3script_to_hex: (a: number) => [number, number];
export const plutusv3script_from_hex: (a: number, b: number) => [number, number, number];
export const redeemers_to_flat_format: (a: number) => number;
export const exunits_checked_add: (a: number, b: number) => [number, number, number];
export const compute_total_ex_units: (a: number) => [number, number, number];
export const __wbg_alonzoformattxout_free: (a: number, b: number) => void;
export const alonzoformattxout_to_cbor_bytes: (a: number) => [number, number];
export const alonzoformattxout_to_canonical_cbor_bytes: (a: number) => [number, number];
export const alonzoformattxout_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const alonzoformattxout_to_cbor_hex: (a: number) => [number, number];
export const alonzoformattxout_to_canonical_cbor_hex: (a: number) => [number, number];
export const alonzoformattxout_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const alonzoformattxout_to_json: (a: number) => [number, number, number, number];
export const alonzoformattxout_to_js_value: (a: number) => [number, number, number];
export const alonzoformattxout_from_json: (a: number, b: number) => [number, number, number];
export const alonzoformattxout_address: (a: number) => number;
export const alonzoformattxout_amount: (a: number) => number;
export const alonzoformattxout_set_datum_hash: (a: number, b: number) => void;
export const alonzoformattxout_datum_hash: (a: number) => number;
export const alonzoformattxout_new: (a: number, b: number) => number;
export const __wbg_conwayformattxout_free: (a: number, b: number) => void;
export const conwayformattxout_to_cbor_bytes: (a: number) => [number, number];
export const conwayformattxout_to_canonical_cbor_bytes: (a: number) => [number, number];
export const conwayformattxout_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const conwayformattxout_to_cbor_hex: (a: number) => [number, number];
export const conwayformattxout_to_canonical_cbor_hex: (a: number) => [number, number];
export const conwayformattxout_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const conwayformattxout_to_json: (a: number) => [number, number, number, number];
export const conwayformattxout_to_js_value: (a: number) => [number, number, number];
export const conwayformattxout_from_json: (a: number, b: number) => [number, number, number];
export const conwayformattxout_address: (a: number) => number;
export const conwayformattxout_amount: (a: number) => number;
export const conwayformattxout_set_datum_option: (a: number, b: number) => void;
export const conwayformattxout_datum_option: (a: number) => number;
export const conwayformattxout_set_script_reference: (a: number, b: number) => void;
export const conwayformattxout_script_reference: (a: number) => number;
export const conwayformattxout_new: (a: number, b: number) => number;
export const __wbg_datumoption_free: (a: number, b: number) => void;
export const datumoption_to_cbor_bytes: (a: number) => [number, number];
export const datumoption_to_canonical_cbor_bytes: (a: number) => [number, number];
export const datumoption_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const datumoption_to_cbor_hex: (a: number) => [number, number];
export const datumoption_to_canonical_cbor_hex: (a: number) => [number, number];
export const datumoption_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const datumoption_to_json: (a: number) => [number, number, number, number];
export const datumoption_to_js_value: (a: number) => [number, number, number];
export const datumoption_from_json: (a: number, b: number) => [number, number, number];
export const datumoption_new_hash: (a: number) => number;
export const datumoption_new_datum: (a: number) => number;
export const datumoption_kind: (a: number) => number;
export const datumoption_as_hash: (a: number) => number;
export const datumoption_as_datum: (a: number) => number;
export const __wbg_nativescript_free: (a: number, b: number) => void;
export const nativescript_to_cbor_bytes: (a: number) => [number, number];
export const nativescript_to_canonical_cbor_bytes: (a: number) => [number, number];
export const nativescript_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const nativescript_to_cbor_hex: (a: number) => [number, number];
export const nativescript_to_canonical_cbor_hex: (a: number) => [number, number];
export const nativescript_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const nativescript_to_json: (a: number) => [number, number, number, number];
export const nativescript_to_js_value: (a: number) => [number, number, number];
export const nativescript_from_json: (a: number, b: number) => [number, number, number];
export const nativescript_new_script_pubkey: (a: number) => number;
export const nativescript_new_script_all: (a: number) => number;
export const nativescript_new_script_any: (a: number) => number;
export const nativescript_new_script_n_of_k: (a: bigint, b: number) => number;
export const nativescript_new_script_invalid_before: (a: bigint) => number;
export const nativescript_new_script_invalid_hereafter: (a: bigint) => number;
export const nativescript_kind: (a: number) => number;
export const nativescript_as_script_pubkey: (a: number) => number;
export const nativescript_as_script_all: (a: number) => number;
export const nativescript_as_script_any: (a: number) => number;
export const nativescript_as_script_n_of_k: (a: number) => number;
export const nativescript_as_script_invalid_before: (a: number) => number;
export const nativescript_as_script_invalid_hereafter: (a: number) => number;
export const __wbg_scriptall_free: (a: number, b: number) => void;
export const scriptall_to_cbor_bytes: (a: number) => [number, number];
export const scriptall_to_canonical_cbor_bytes: (a: number) => [number, number];
export const scriptall_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const scriptall_to_cbor_hex: (a: number) => [number, number];
export const scriptall_to_canonical_cbor_hex: (a: number) => [number, number];
export const scriptall_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const scriptall_to_json: (a: number) => [number, number, number, number];
export const scriptall_to_js_value: (a: number) => [number, number, number];
export const scriptall_from_json: (a: number, b: number) => [number, number, number];
export const scriptall_native_scripts: (a: number) => number;
export const scriptall_new: (a: number) => number;
export const __wbg_scriptany_free: (a: number, b: number) => void;
export const scriptany_to_cbor_bytes: (a: number) => [number, number];
export const scriptany_to_canonical_cbor_bytes: (a: number) => [number, number];
export const scriptany_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const scriptany_to_cbor_hex: (a: number) => [number, number];
export const scriptany_to_canonical_cbor_hex: (a: number) => [number, number];
export const scriptany_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const scriptany_to_json: (a: number) => [number, number, number, number];
export const scriptany_to_js_value: (a: number) => [number, number, number];
export const scriptany_from_json: (a: number, b: number) => [number, number, number];
export const scriptany_native_scripts: (a: number) => number;
export const scriptany_new: (a: number) => number;
export const __wbg_scriptinvalidbefore_free: (a: number, b: number) => void;
export const scriptinvalidbefore_to_cbor_bytes: (a: number) => [number, number];
export const scriptinvalidbefore_to_canonical_cbor_bytes: (a: number) => [number, number];
export const scriptinvalidbefore_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const scriptinvalidbefore_to_cbor_hex: (a: number) => [number, number];
export const scriptinvalidbefore_to_canonical_cbor_hex: (a: number) => [number, number];
export const scriptinvalidbefore_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const scriptinvalidbefore_to_json: (a: number) => [number, number, number, number];
export const scriptinvalidbefore_to_js_value: (a: number) => [number, number, number];
export const scriptinvalidbefore_from_json: (a: number, b: number) => [number, number, number];
export const scriptinvalidbefore_before: (a: number) => bigint;
export const scriptinvalidbefore_new: (a: bigint) => number;
export const __wbg_scriptinvalidhereafter_free: (a: number, b: number) => void;
export const scriptinvalidhereafter_to_cbor_bytes: (a: number) => [number, number];
export const scriptinvalidhereafter_to_canonical_cbor_bytes: (a: number) => [number, number];
export const scriptinvalidhereafter_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const scriptinvalidhereafter_to_cbor_hex: (a: number) => [number, number];
export const scriptinvalidhereafter_to_canonical_cbor_hex: (a: number) => [number, number];
export const scriptinvalidhereafter_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const scriptinvalidhereafter_to_json: (a: number) => [number, number, number, number];
export const scriptinvalidhereafter_to_js_value: (a: number) => [number, number, number];
export const scriptinvalidhereafter_from_json: (a: number, b: number) => [number, number, number];
export const scriptinvalidhereafter_after: (a: number) => bigint;
export const scriptinvalidhereafter_new: (a: bigint) => number;
export const __wbg_scriptnofk_free: (a: number, b: number) => void;
export const scriptnofk_to_cbor_bytes: (a: number) => [number, number];
export const scriptnofk_to_canonical_cbor_bytes: (a: number) => [number, number];
export const scriptnofk_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const scriptnofk_to_cbor_hex: (a: number) => [number, number];
export const scriptnofk_to_canonical_cbor_hex: (a: number) => [number, number];
export const scriptnofk_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const scriptnofk_to_json: (a: number) => [number, number, number, number];
export const scriptnofk_to_js_value: (a: number) => [number, number, number];
export const scriptnofk_from_json: (a: number, b: number) => [number, number, number];
export const scriptnofk_n: (a: number) => bigint;
export const scriptnofk_native_scripts: (a: number) => number;
export const scriptnofk_new: (a: bigint, b: number) => number;
export const __wbg_scriptpubkey_free: (a: number, b: number) => void;
export const scriptpubkey_to_cbor_bytes: (a: number) => [number, number];
export const scriptpubkey_to_canonical_cbor_bytes: (a: number) => [number, number];
export const scriptpubkey_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const scriptpubkey_to_cbor_hex: (a: number) => [number, number];
export const scriptpubkey_to_canonical_cbor_hex: (a: number) => [number, number];
export const scriptpubkey_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const scriptpubkey_to_json: (a: number) => [number, number, number, number];
export const scriptpubkey_to_js_value: (a: number) => [number, number, number];
export const scriptpubkey_from_json: (a: number, b: number) => [number, number, number];
export const scriptpubkey_ed25519_key_hash: (a: number) => number;
export const scriptpubkey_new: (a: number) => number;
export const __wbg_transaction_free: (a: number, b: number) => void;
export const transaction_to_cbor_bytes: (a: number) => [number, number];
export const transaction_to_canonical_cbor_bytes: (a: number) => [number, number];
export const transaction_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transaction_to_cbor_hex: (a: number) => [number, number];
export const transaction_to_canonical_cbor_hex: (a: number) => [number, number];
export const transaction_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const transaction_to_json: (a: number) => [number, number, number, number];
export const transaction_to_js_value: (a: number) => [number, number, number];
export const transaction_from_json: (a: number, b: number) => [number, number, number];
export const transaction_body: (a: number) => number;
export const transaction_witness_set: (a: number) => number;
export const transaction_is_valid: (a: number) => number;
export const transaction_auxiliary_data: (a: number) => number;
export const transaction_new: (a: number, b: number, c: number, d: number) => number;
export const __wbg_transactionbody_free: (a: number, b: number) => void;
export const transactionbody_to_cbor_bytes: (a: number) => [number, number];
export const transactionbody_to_canonical_cbor_bytes: (a: number) => [number, number];
export const transactionbody_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transactionbody_to_cbor_hex: (a: number) => [number, number];
export const transactionbody_to_canonical_cbor_hex: (a: number) => [number, number];
export const transactionbody_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const transactionbody_to_json: (a: number) => [number, number, number, number];
export const transactionbody_to_js_value: (a: number) => [number, number, number];
export const transactionbody_from_json: (a: number, b: number) => [number, number, number];
export const transactionbody_inputs: (a: number) => number;
export const transactionbody_outputs: (a: number) => number;
export const transactionbody_fee: (a: number) => bigint;
export const transactionbody_set_ttl: (a: number, b: bigint) => void;
export const transactionbody_ttl: (a: number) => [number, bigint];
export const transactionbody_set_certs: (a: number, b: number) => void;
export const transactionbody_certs: (a: number) => number;
export const transactionbody_set_withdrawals: (a: number, b: number) => void;
export const transactionbody_withdrawals: (a: number) => number;
export const transactionbody_set_auxiliary_data_hash: (a: number, b: number) => void;
export const transactionbody_auxiliary_data_hash: (a: number) => number;
export const transactionbody_set_validity_interval_start: (a: number, b: bigint) => void;
export const transactionbody_validity_interval_start: (a: number) => [number, bigint];
export const transactionbody_set_mint: (a: number, b: number) => void;
export const transactionbody_mint: (a: number) => number;
export const transactionbody_set_script_data_hash: (a: number, b: number) => void;
export const transactionbody_script_data_hash: (a: number) => number;
export const transactionbody_set_collateral_inputs: (a: number, b: number) => void;
export const transactionbody_collateral_inputs: (a: number) => number;
export const transactionbody_set_required_signers: (a: number, b: number) => void;
export const transactionbody_required_signers: (a: number) => number;
export const transactionbody_set_network_id: (a: number, b: number) => void;
export const transactionbody_network_id: (a: number) => number;
export const transactionbody_set_collateral_return: (a: number, b: number) => void;
export const transactionbody_collateral_return: (a: number) => number;
export const transactionbody_set_total_collateral: (a: number, b: bigint) => void;
export const transactionbody_total_collateral: (a: number) => [number, bigint];
export const transactionbody_set_reference_inputs: (a: number, b: number) => void;
export const transactionbody_reference_inputs: (a: number) => number;
export const transactionbody_set_voting_procedures: (a: number, b: number) => void;
export const transactionbody_voting_procedures: (a: number) => number;
export const transactionbody_set_proposal_procedures: (a: number, b: number) => void;
export const transactionbody_proposal_procedures: (a: number) => number;
export const transactionbody_set_current_treasury_value: (a: number, b: bigint) => void;
export const transactionbody_current_treasury_value: (a: number) => [number, bigint];
export const transactionbody_set_donation: (a: number, b: bigint) => void;
export const transactionbody_donation: (a: number) => [number, bigint];
export const transactionbody_new: (a: number, b: number, c: bigint) => number;
export const __wbg_transactioninput_free: (a: number, b: number) => void;
export const transactioninput_to_cbor_bytes: (a: number) => [number, number];
export const transactioninput_to_canonical_cbor_bytes: (a: number) => [number, number];
export const transactioninput_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transactioninput_to_cbor_hex: (a: number) => [number, number];
export const transactioninput_to_canonical_cbor_hex: (a: number) => [number, number];
export const transactioninput_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const transactioninput_to_json: (a: number) => [number, number, number, number];
export const transactioninput_to_js_value: (a: number) => [number, number, number];
export const transactioninput_from_json: (a: number, b: number) => [number, number, number];
export const transactioninput_transaction_id: (a: number) => number;
export const transactioninput_index: (a: number) => bigint;
export const transactioninput_new: (a: number, b: bigint) => number;
export const __wbg_transactionoutput_free: (a: number, b: number) => void;
export const transactionoutput_to_cbor_bytes: (a: number) => [number, number];
export const transactionoutput_to_canonical_cbor_bytes: (a: number) => [number, number];
export const transactionoutput_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transactionoutput_to_cbor_hex: (a: number) => [number, number];
export const transactionoutput_to_canonical_cbor_hex: (a: number) => [number, number];
export const transactionoutput_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const transactionoutput_to_json: (a: number) => [number, number, number, number];
export const transactionoutput_to_js_value: (a: number) => [number, number, number];
export const transactionoutput_from_json: (a: number, b: number) => [number, number, number];
export const transactionoutput_new_alonzo_format_tx_out: (a: number) => number;
export const transactionoutput_new_conway_format_tx_out: (a: number) => number;
export const transactionoutput_kind: (a: number) => number;
export const transactionoutput_as_alonzo_format_tx_out: (a: number) => number;
export const transactionoutput_as_conway_format_tx_out: (a: number) => number;
export const __wbg_transactionwitnessset_free: (a: number, b: number) => void;
export const transactionwitnessset_to_cbor_bytes: (a: number) => [number, number];
export const transactionwitnessset_to_canonical_cbor_bytes: (a: number) => [number, number];
export const transactionwitnessset_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transactionwitnessset_to_cbor_hex: (a: number) => [number, number];
export const transactionwitnessset_to_canonical_cbor_hex: (a: number) => [number, number];
export const transactionwitnessset_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const transactionwitnessset_to_json: (a: number) => [number, number, number, number];
export const transactionwitnessset_to_js_value: (a: number) => [number, number, number];
export const transactionwitnessset_from_json: (a: number, b: number) => [number, number, number];
export const transactionwitnessset_set_vkeywitnesses: (a: number, b: number) => void;
export const transactionwitnessset_vkeywitnesses: (a: number) => number;
export const transactionwitnessset_set_native_scripts: (a: number, b: number) => void;
export const transactionwitnessset_native_scripts: (a: number) => number;
export const transactionwitnessset_set_bootstrap_witnesses: (a: number, b: number) => void;
export const transactionwitnessset_bootstrap_witnesses: (a: number) => number;
export const transactionwitnessset_set_plutus_v1_scripts: (a: number, b: number) => void;
export const transactionwitnessset_plutus_v1_scripts: (a: number) => number;
export const transactionwitnessset_set_plutus_datums: (a: number, b: number) => void;
export const transactionwitnessset_plutus_datums: (a: number) => number;
export const transactionwitnessset_set_redeemers: (a: number, b: number) => void;
export const transactionwitnessset_redeemers: (a: number) => number;
export const transactionwitnessset_set_plutus_v2_scripts: (a: number, b: number) => void;
export const transactionwitnessset_plutus_v2_scripts: (a: number) => number;
export const transactionwitnessset_set_plutus_v3_scripts: (a: number, b: number) => void;
export const transactionwitnessset_plutus_v3_scripts: (a: number) => number;
export const transactionwitnessset_new: () => number;
export const __wbg_mapassetnametocoin_free: (a: number, b: number) => void;
export const mapassetnametocoin_get: (a: number, b: number) => [number, bigint];
export const mapassetnametocoin_insert: (a: number, b: number, c: bigint) => [number, bigint];
export const mapassetnametocoin_new: () => number;
export const mapassetnametocoin_len: (a: number) => number;
export const mapassetnametocoin_is_empty: (a: number) => number;
export const mapassetnametocoin_keys: (a: number) => number;
export const assetname_from_str: (a: number, b: number) => [number, number, number];
export const assetname_to_str: (a: number) => [number, number, number, number];
export const assetname_to_raw_bytes: (a: number) => [number, number];
export const assetname_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const assetname_to_hex: (a: number) => [number, number];
export const assetname_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_multiasset_free: (a: number, b: number) => void;
export const multiasset_new: () => number;
export const multiasset_policy_count: (a: number) => number;
export const multiasset_insert_assets: (a: number, b: number, c: number) => number;
export const multiasset_get_assets: (a: number, b: number) => number;
export const multiasset_get: (a: number, b: number, c: number) => [number, bigint];
export const multiasset_set: (a: number, b: number, c: number, d: bigint) => [number, bigint];
export const multiasset_keys: (a: number) => number;
export const multiasset_checked_add: (a: number, b: number) => [number, number, number];
export const multiasset_checked_sub: (a: number, b: number) => [number, number, number];
export const multiasset_clamped_sub: (a: number, b: number) => number;
export const __wbg_mint_free: (a: number, b: number) => void;
export const mint_new: () => number;
export const mint_policy_count: (a: number) => number;
export const mint_insert_assets: (a: number, b: number, c: number) => number;
export const mint_get_assets: (a: number, b: number) => number;
export const mint_get: (a: number, b: number, c: number) => [number, bigint];
export const mint_set: (a: number, b: number, c: number, d: bigint) => [number, bigint];
export const mint_keys: (a: number) => number;
export const mint_checked_add: (a: number, b: number) => [number, number, number];
export const mint_checked_sub: (a: number, b: number) => [number, number, number];
export const mint_as_positive_multiasset: (a: number) => number;
export const mint_as_negative_multiasset: (a: number) => number;
export const __wbg_value_free: (a: number, b: number) => void;
export const value_to_cbor_bytes: (a: number) => [number, number];
export const value_to_canonical_cbor_bytes: (a: number) => [number, number];
export const value_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const value_to_cbor_hex: (a: number) => [number, number];
export const value_to_canonical_cbor_hex: (a: number) => [number, number];
export const value_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const value_to_json: (a: number) => [number, number, number, number];
export const value_to_js_value: (a: number) => [number, number, number];
export const value_from_json: (a: number, b: number) => [number, number, number];
export const value_from_coin: (a: bigint) => number;
export const value_new: (a: bigint, b: number) => number;
export const value_coin: (a: number) => bigint;
export const value_multi_asset: (a: number) => number;
export const value_zero: () => number;
export const value_is_zero: (a: number) => number;
export const value_has_multiassets: (a: number) => number;
export const value_checked_add: (a: number, b: number) => [number, number, number];
export const value_checked_sub: (a: number, b: number) => [number, number, number];
export const value_clamped_sub: (a: number, b: number) => number;
export const __wbg_addressid_free: (a: number, b: number) => void;
export const addressid_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const addressid_from_bech32: (a: number, b: number) => [number, number, number];
export const addressid_to_raw_bytes: (a: number) => [number, number];
export const addressid_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const addressid_to_hex: (a: number) => [number, number];
export const addressid_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_byronscript_free: (a: number, b: number) => void;
export const byronscript_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const byronscript_from_bech32: (a: number, b: number) => [number, number, number];
export const byronscript_to_raw_bytes: (a: number) => [number, number];
export const byronscript_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const byronscript_to_hex: (a: number) => [number, number];
export const byronscript_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_stakeholderid_free: (a: number, b: number) => void;
export const stakeholderid_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const stakeholderid_from_bech32: (a: number, b: number) => [number, number, number];
export const stakeholderid_to_raw_bytes: (a: number) => [number, number];
export const stakeholderid_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const stakeholderid_to_hex: (a: number) => [number, number];
export const stakeholderid_from_hex: (a: number, b: number) => [number, number, number];
export const stakeholderid_new: (a: number) => number;
export const addrattributes_new_bootstrap_era: (a: number, b: number) => number;
export const addrattributes_new_single_key: (a: number, b: number, c: number) => number;
export const addressid_new: (a: number, b: number, c: number) => number;
export const addresscontent_hash_and_create: (a: number, b: number, c: number) => number;
export const addresscontent_new_redeem: (a: number, b: number) => number;
export const addresscontent_new_simple: (a: number, b: number) => number;
export const addresscontent_to_address: (a: number) => number;
export const addresscontent_byron_protocol_magic: (a: number) => number;
export const addresscontent_network_id: (a: number) => [number, number, number];
export const addresscontent_icarus_from_key: (a: number, b: number) => number;
export const addresscontent_identical_with_pubkey: (a: number, b: number) => number;
export const byronaddress_to_base58: (a: number) => [number, number];
export const byronaddress_from_base58: (a: number, b: number) => [number, number, number];
export const byronaddress_is_valid: (a: number, b: number) => number;
export const byronaddress_to_address: (a: number) => number;
export const byronaddress_from_address: (a: number) => number;
export const byronaddress_from_address_content: (a: number) => number;
export const __wbg_protocolmagic_free: (a: number, b: number) => void;
export const protocolmagic_new: (a: number) => number;
export const protocolmagic_to_int: (a: number) => number;
export const make_daedalus_bootstrap_witness: (a: number, b: number, c: number) => number;
export const make_icarus_bootstrap_witness: (a: number, b: number, c: number) => number;
export const __wbg_certificatebuilderresult_free: (a: number, b: number) => void;
export const __wbg_singlecertificatebuilder_free: (a: number, b: number) => void;
export const singlecertificatebuilder_new: (a: number) => number;
export const singlecertificatebuilder_skip_witness: (a: number) => number;
export const singlecertificatebuilder_payment_key: (a: number) => [number, number, number];
export const singlecertificatebuilder_native_script: (a: number, b: number, c: number) => [number, number, number];
export const singlecertificatebuilder_plutus_script: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_proposalbuilderresult_free: (a: number, b: number) => void;
export const __wbg_proposalbuilder_free: (a: number, b: number) => void;
export const proposalbuilder_new: () => number;
export const proposalbuilder_with_proposal: (a: number, b: number) => [number, number, number];
export const proposalbuilder_with_native_script_proposal: (a: number, b: number, c: number, d: number) => [number, number, number];
export const proposalbuilder_with_plutus_proposal: (a: number, b: number, c: number, d: number, e: number) => [number, number, number];
export const proposalbuilder_with_plutus_proposal_inline_datum: (a: number, b: number, c: number, d: number) => [number, number, number];
export const proposalbuilder_build: (a: number) => number;
export const __wbg_redeemerwitnesskey_free: (a: number, b: number) => void;
export const redeemerwitnesskey_new: (a: number, b: bigint) => number;
export const redeemerwitnesskey_from_redeemer: (a: number) => number;
export const __wbg_untaggedredeemer_free: (a: number, b: number) => void;
export const untaggedredeemer_new: (a: number, b: number) => number;
export const __wbg_redeemersetbuilder_free: (a: number, b: number) => void;
export const redeemersetbuilder_new: () => number;
export const redeemersetbuilder_is_empty: (a: number) => number;
export const redeemersetbuilder_update_ex_units: (a: number, b: number, c: number) => void;
export const redeemersetbuilder_add_spend: (a: number, b: number) => void;
export const redeemersetbuilder_add_mint: (a: number, b: number) => void;
export const redeemersetbuilder_add_reward: (a: number, b: number) => void;
export const redeemersetbuilder_add_cert: (a: number, b: number) => void;
export const redeemersetbuilder_add_proposal: (a: number, b: number) => void;
export const redeemersetbuilder_add_vote: (a: number, b: number) => void;
export const redeemersetbuilder_build: (a: number, b: number) => [number, number, number];
export const __wbg_transactionunspentoutput_free: (a: number, b: number) => void;
export const transactionunspentoutput_to_cbor_bytes: (a: number) => [number, number];
export const transactionunspentoutput_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transactionunspentoutput_to_cbor_hex: (a: number) => [number, number];
export const transactionunspentoutput_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const transactionunspentoutput_new: (a: number, b: number) => number;
export const transactionunspentoutput_input: (a: number) => number;
export const transactionunspentoutput_output: (a: number) => number;
export const __wbg_transactionbuilderconfig_free: (a: number, b: number) => void;
export const __wbg_transactionbuilderconfigbuilder_free: (a: number, b: number) => void;
export const transactionbuilderconfigbuilder_new: () => number;
export const transactionbuilderconfigbuilder_fee_algo: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_coins_per_utxo_byte: (a: number, b: bigint) => number;
export const transactionbuilderconfigbuilder_pool_deposit: (a: number, b: bigint) => number;
export const transactionbuilderconfigbuilder_key_deposit: (a: number, b: bigint) => number;
export const transactionbuilderconfigbuilder_max_value_size: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_max_tx_size: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_prefer_pure_change: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_ex_unit_prices: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_cost_models: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_collateral_percentage: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_max_collateral_inputs: (a: number, b: number) => number;
export const transactionbuilderconfigbuilder_build: (a: number) => [number, number, number];
export const __wbg_transactionbuilder_free: (a: number, b: number) => void;
export const transactionbuilder_select_utxos: (a: number, b: number) => [number, number];
export const transactionbuilder_add_input: (a: number, b: number) => [number, number];
export const transactionbuilder_add_utxo: (a: number, b: number) => void;
export const transactionbuilder_fee_for_input: (a: number, b: number) => [bigint, number, number];
export const transactionbuilder_add_reference_input: (a: number, b: number) => void;
export const transactionbuilder_add_output: (a: number, b: number) => [number, number];
export const transactionbuilder_fee_for_output: (a: number, b: number) => [bigint, number, number];
export const transactionbuilder_set_fee: (a: number, b: bigint) => void;
export const transactionbuilder_set_donation: (a: number, b: bigint) => void;
export const transactionbuilder_set_current_treasury_value: (a: number, b: bigint) => void;
export const transactionbuilder_set_ttl: (a: number, b: bigint) => void;
export const transactionbuilder_set_validity_start_interval: (a: number, b: bigint) => void;
export const transactionbuilder_add_cert: (a: number, b: number) => void;
export const transactionbuilder_add_proposal: (a: number, b: number) => void;
export const transactionbuilder_add_vote: (a: number, b: number) => void;
export const transactionbuilder_get_withdrawals: (a: number) => number;
export const transactionbuilder_add_withdrawal: (a: number, b: number) => void;
export const transactionbuilder_get_auxiliary_data: (a: number) => number;
export const transactionbuilder_set_auxiliary_data: (a: number, b: number) => void;
export const transactionbuilder_add_auxiliary_data: (a: number, b: number) => void;
export const transactionbuilder_add_mint: (a: number, b: number) => [number, number];
export const transactionbuilder_get_mint: (a: number) => number;
export const transactionbuilder_new: (a: number) => number;
export const transactionbuilder_add_collateral: (a: number, b: number) => [number, number];
export const transactionbuilder_add_required_signer: (a: number, b: number) => void;
export const transactionbuilder_set_network_id: (a: number, b: number) => void;
export const transactionbuilder_network_id: (a: number) => number;
export const transactionbuilder_get_explicit_input: (a: number) => [number, number, number];
export const transactionbuilder_get_implicit_input: (a: number) => [number, number, number];
export const transactionbuilder_get_total_input: (a: number) => [number, number, number];
export const transactionbuilder_get_total_output: (a: number) => [number, number, number];
export const transactionbuilder_get_explicit_output: (a: number) => [number, number, number];
export const transactionbuilder_get_deposit: (a: number) => [bigint, number, number];
export const transactionbuilder_get_fee_if_set: (a: number) => [number, bigint];
export const transactionbuilder_set_collateral_return: (a: number, b: number) => void;
export const transactionbuilder_full_size: (a: number) => [number, number, number];
export const transactionbuilder_output_sizes: (a: number) => [number, number];
export const transactionbuilder_build_for_evaluation: (a: number, b: number, c: number) => [number, number, number];
export const transactionbuilder_build: (a: number, b: number, c: number) => [number, number, number];
export const transactionbuilder_set_exunits: (a: number, b: number, c: number) => void;
export const transactionbuilder_min_fee: (a: number, b: number) => [bigint, number, number];
export const transactionbuilder_add_change_if_needed: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_txredeemerbuilder_free: (a: number, b: number) => void;
export const txredeemerbuilder_build: (a: number) => [number, number, number];
export const txredeemerbuilder_set_exunits: (a: number, b: number, c: number) => void;
export const txredeemerbuilder_draft_body: (a: number) => number;
export const txredeemerbuilder_auxiliary_data: (a: number) => number;
export const txredeemerbuilder_draft_tx: (a: number) => [number, number, number];
export const __wbg_signedtxbuilder_free: (a: number, b: number) => void;
export const signedtxbuilder_new_with_data: (a: number, b: number, c: number, d: number) => number;
export const signedtxbuilder_new_without_data: (a: number, b: number, c: number) => number;
export const signedtxbuilder_build_checked: (a: number) => [number, number, number];
export const signedtxbuilder_build_unchecked: (a: number) => number;
export const signedtxbuilder_add_vkey: (a: number, b: number) => void;
export const signedtxbuilder_add_bootstrap: (a: number, b: number) => void;
export const signedtxbuilder_body: (a: number) => number;
export const signedtxbuilder_witness_set: (a: number) => number;
export const signedtxbuilder_is_valid: (a: number) => number;
export const signedtxbuilder_auxiliary_data: (a: number) => number;
export const __wbg_anchor_free: (a: number, b: number) => void;
export const anchor_to_cbor_bytes: (a: number) => [number, number];
export const anchor_to_canonical_cbor_bytes: (a: number) => [number, number];
export const anchor_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const anchor_to_cbor_hex: (a: number) => [number, number];
export const anchor_to_canonical_cbor_hex: (a: number) => [number, number];
export const anchor_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const anchor_to_json: (a: number) => [number, number, number, number];
export const anchor_to_js_value: (a: number) => [number, number, number];
export const anchor_from_json: (a: number, b: number) => [number, number, number];
export const anchor_anchor_url: (a: number) => number;
export const anchor_anchor_doc_hash: (a: number) => number;
export const anchor_new: (a: number, b: number) => number;
export const __wbg_constitution_free: (a: number, b: number) => void;
export const constitution_to_cbor_bytes: (a: number) => [number, number];
export const constitution_to_canonical_cbor_bytes: (a: number) => [number, number];
export const constitution_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const constitution_to_cbor_hex: (a: number) => [number, number];
export const constitution_to_canonical_cbor_hex: (a: number) => [number, number];
export const constitution_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const constitution_to_json: (a: number) => [number, number, number, number];
export const constitution_to_js_value: (a: number) => [number, number, number];
export const constitution_from_json: (a: number, b: number) => [number, number, number];
export const constitution_anchor: (a: number) => number;
export const constitution_script_hash: (a: number) => number;
export const constitution_new: (a: number, b: number) => number;
export const __wbg_govaction_free: (a: number, b: number) => void;
export const govaction_to_cbor_bytes: (a: number) => [number, number];
export const govaction_to_canonical_cbor_bytes: (a: number) => [number, number];
export const govaction_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const govaction_to_cbor_hex: (a: number) => [number, number];
export const govaction_to_canonical_cbor_hex: (a: number) => [number, number];
export const govaction_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const govaction_to_json: (a: number) => [number, number, number, number];
export const govaction_to_js_value: (a: number) => [number, number, number];
export const govaction_from_json: (a: number, b: number) => [number, number, number];
export const govaction_new_parameter_change_action: (a: number, b: number, c: number) => number;
export const govaction_new_hard_fork_initiation_action: (a: number, b: number) => number;
export const govaction_new_treasury_withdrawals_action: (a: number, b: number) => number;
export const govaction_new_no_confidence: (a: number) => number;
export const govaction_new_update_committee: (a: number, b: number, c: number, d: number) => number;
export const govaction_new_new_constitution: (a: number, b: number) => number;
export const govaction_new_info_action: () => number;
export const govaction_kind: (a: number) => number;
export const govaction_as_parameter_change_action: (a: number) => number;
export const govaction_as_hard_fork_initiation_action: (a: number) => number;
export const govaction_as_treasury_withdrawals_action: (a: number) => number;
export const govaction_as_no_confidence: (a: number) => number;
export const govaction_as_update_committee: (a: number) => number;
export const govaction_as_new_constitution: (a: number) => number;
export const __wbg_govactionid_free: (a: number, b: number) => void;
export const govactionid_to_cbor_bytes: (a: number) => [number, number];
export const govactionid_to_canonical_cbor_bytes: (a: number) => [number, number];
export const govactionid_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const govactionid_to_cbor_hex: (a: number) => [number, number];
export const govactionid_to_canonical_cbor_hex: (a: number) => [number, number];
export const govactionid_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const govactionid_to_json: (a: number) => [number, number, number, number];
export const govactionid_to_js_value: (a: number) => [number, number, number];
export const govactionid_from_json: (a: number, b: number) => [number, number, number];
export const govactionid_transaction_id: (a: number) => number;
export const govactionid_gov_action_index: (a: number) => bigint;
export const govactionid_new: (a: number, b: bigint) => number;
export const __wbg_hardforkinitiationaction_free: (a: number, b: number) => void;
export const hardforkinitiationaction_to_cbor_bytes: (a: number) => [number, number];
export const hardforkinitiationaction_to_canonical_cbor_bytes: (a: number) => [number, number];
export const hardforkinitiationaction_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const hardforkinitiationaction_to_cbor_hex: (a: number) => [number, number];
export const hardforkinitiationaction_to_canonical_cbor_hex: (a: number) => [number, number];
export const hardforkinitiationaction_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const hardforkinitiationaction_to_json: (a: number) => [number, number, number, number];
export const hardforkinitiationaction_to_js_value: (a: number) => [number, number, number];
export const hardforkinitiationaction_from_json: (a: number, b: number) => [number, number, number];
export const hardforkinitiationaction_action_id: (a: number) => number;
export const hardforkinitiationaction_version: (a: number) => number;
export const hardforkinitiationaction_new: (a: number, b: number) => number;
export const __wbg_newconstitution_free: (a: number, b: number) => void;
export const newconstitution_to_cbor_bytes: (a: number) => [number, number];
export const newconstitution_to_canonical_cbor_bytes: (a: number) => [number, number];
export const newconstitution_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const newconstitution_to_cbor_hex: (a: number) => [number, number];
export const newconstitution_to_canonical_cbor_hex: (a: number) => [number, number];
export const newconstitution_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const newconstitution_to_json: (a: number) => [number, number, number, number];
export const newconstitution_to_js_value: (a: number) => [number, number, number];
export const newconstitution_from_json: (a: number, b: number) => [number, number, number];
export const newconstitution_action_id: (a: number) => number;
export const newconstitution_constitution: (a: number) => number;
export const newconstitution_new: (a: number, b: number) => number;
export const __wbg_noconfidence_free: (a: number, b: number) => void;
export const noconfidence_to_cbor_bytes: (a: number) => [number, number];
export const noconfidence_to_canonical_cbor_bytes: (a: number) => [number, number];
export const noconfidence_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const noconfidence_to_cbor_hex: (a: number) => [number, number];
export const noconfidence_to_canonical_cbor_hex: (a: number) => [number, number];
export const noconfidence_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const noconfidence_to_json: (a: number) => [number, number, number, number];
export const noconfidence_to_js_value: (a: number) => [number, number, number];
export const noconfidence_from_json: (a: number, b: number) => [number, number, number];
export const noconfidence_action_id: (a: number) => number;
export const noconfidence_new: (a: number) => number;
export const __wbg_parameterchangeaction_free: (a: number, b: number) => void;
export const parameterchangeaction_to_cbor_bytes: (a: number) => [number, number];
export const parameterchangeaction_to_canonical_cbor_bytes: (a: number) => [number, number];
export const parameterchangeaction_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const parameterchangeaction_to_cbor_hex: (a: number) => [number, number];
export const parameterchangeaction_to_canonical_cbor_hex: (a: number) => [number, number];
export const parameterchangeaction_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const parameterchangeaction_to_json: (a: number) => [number, number, number, number];
export const parameterchangeaction_to_js_value: (a: number) => [number, number, number];
export const parameterchangeaction_from_json: (a: number, b: number) => [number, number, number];
export const parameterchangeaction_action_id: (a: number) => number;
export const parameterchangeaction_update: (a: number) => number;
export const parameterchangeaction_policy_hash: (a: number) => number;
export const parameterchangeaction_new: (a: number, b: number, c: number) => number;
export const __wbg_proposalprocedure_free: (a: number, b: number) => void;
export const proposalprocedure_to_cbor_bytes: (a: number) => [number, number];
export const proposalprocedure_to_canonical_cbor_bytes: (a: number) => [number, number];
export const proposalprocedure_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const proposalprocedure_to_cbor_hex: (a: number) => [number, number];
export const proposalprocedure_to_canonical_cbor_hex: (a: number) => [number, number];
export const proposalprocedure_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const proposalprocedure_to_json: (a: number) => [number, number, number, number];
export const proposalprocedure_to_js_value: (a: number) => [number, number, number];
export const proposalprocedure_from_json: (a: number, b: number) => [number, number, number];
export const proposalprocedure_deposit: (a: number) => bigint;
export const proposalprocedure_reward_account: (a: number) => number;
export const proposalprocedure_gov_action: (a: number) => number;
export const proposalprocedure_anchor: (a: number) => number;
export const proposalprocedure_new: (a: bigint, b: number, c: number, d: number) => number;
export const __wbg_treasurywithdrawalsaction_free: (a: number, b: number) => void;
export const treasurywithdrawalsaction_to_cbor_bytes: (a: number) => [number, number];
export const treasurywithdrawalsaction_to_canonical_cbor_bytes: (a: number) => [number, number];
export const treasurywithdrawalsaction_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const treasurywithdrawalsaction_to_cbor_hex: (a: number) => [number, number];
export const treasurywithdrawalsaction_to_canonical_cbor_hex: (a: number) => [number, number];
export const treasurywithdrawalsaction_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const treasurywithdrawalsaction_to_json: (a: number) => [number, number, number, number];
export const treasurywithdrawalsaction_to_js_value: (a: number) => [number, number, number];
export const treasurywithdrawalsaction_from_json: (a: number, b: number) => [number, number, number];
export const treasurywithdrawalsaction_withdrawal: (a: number) => number;
export const treasurywithdrawalsaction_policy_hash: (a: number) => number;
export const treasurywithdrawalsaction_new: (a: number, b: number) => number;
export const __wbg_updatecommittee_free: (a: number, b: number) => void;
export const updatecommittee_to_cbor_bytes: (a: number) => [number, number];
export const updatecommittee_to_canonical_cbor_bytes: (a: number) => [number, number];
export const updatecommittee_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const updatecommittee_to_cbor_hex: (a: number) => [number, number];
export const updatecommittee_to_canonical_cbor_hex: (a: number) => [number, number];
export const updatecommittee_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const updatecommittee_to_json: (a: number) => [number, number, number, number];
export const updatecommittee_to_js_value: (a: number) => [number, number, number];
export const updatecommittee_from_json: (a: number, b: number) => [number, number, number];
export const updatecommittee_action_id: (a: number) => number;
export const updatecommittee_cold_credentials: (a: number) => number;
export const updatecommittee_credentials: (a: number) => number;
export const updatecommittee_unit_interval: (a: number) => number;
export const updatecommittee_new: (a: number, b: number, c: number, d: number) => number;
export const __wbg_voter_free: (a: number, b: number) => void;
export const voter_to_cbor_bytes: (a: number) => [number, number];
export const voter_to_canonical_cbor_bytes: (a: number) => [number, number];
export const voter_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const voter_to_cbor_hex: (a: number) => [number, number];
export const voter_to_canonical_cbor_hex: (a: number) => [number, number];
export const voter_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const voter_to_json: (a: number) => [number, number, number, number];
export const voter_to_js_value: (a: number) => [number, number, number];
export const voter_from_json: (a: number, b: number) => [number, number, number];
export const voter_new_constitutional_committee_hot_key_hash: (a: number) => number;
export const voter_new_constitutional_committee_hot_script_hash: (a: number) => number;
export const voter_new_d_rep_key_hash: (a: number) => number;
export const voter_new_d_rep_script_hash: (a: number) => number;
export const voter_new_staking_pool_key_hash: (a: number) => number;
export const voter_kind: (a: number) => number;
export const voter_as_constitutional_committee_hot_key_hash: (a: number) => number;
export const voter_as_constitutional_committee_hot_script_hash: (a: number) => number;
export const voter_as_d_rep_key_hash: (a: number) => number;
export const voter_as_d_rep_script_hash: (a: number) => number;
export const voter_as_staking_pool_key_hash: (a: number) => number;
export const __wbg_votingprocedure_free: (a: number, b: number) => void;
export const votingprocedure_to_cbor_bytes: (a: number) => [number, number];
export const votingprocedure_to_canonical_cbor_bytes: (a: number) => [number, number];
export const votingprocedure_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const votingprocedure_to_cbor_hex: (a: number) => [number, number];
export const votingprocedure_to_canonical_cbor_hex: (a: number) => [number, number];
export const votingprocedure_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const votingprocedure_to_json: (a: number) => [number, number, number, number];
export const votingprocedure_to_js_value: (a: number) => [number, number, number];
export const votingprocedure_from_json: (a: number, b: number) => [number, number, number];
export const votingprocedure_vote: (a: number) => number;
export const votingprocedure_anchor: (a: number) => number;
export const votingprocedure_new: (a: number, b: number) => number;
export const __wbg_votingprocedures_free: (a: number, b: number) => void;
export const votingprocedures_new: () => number;
export const votingprocedures_len: (a: number) => number;
export const votingprocedures_insert: (a: number, b: number, c: number) => number;
export const votingprocedures_get: (a: number, b: number) => number;
export const votingprocedures_keys: (a: number) => number;
export const __wbg_mapu64toarri64_free: (a: number, b: number) => void;
export const mapu64toarri64_get: (a: number, b: bigint) => [number, number];
export const mapu64toarri64_insert: (a: number, b: bigint, c: number, d: number) => [number, number];
export const mapu64toarri64_new: () => number;
export const mapu64toarri64_len: (a: number) => number;
export const mapu64toarri64_is_empty: (a: number) => number;
export const mapu64toarri64_keys: (a: number) => [number, number];
export const __wbg_costmodels_free: (a: number, b: number) => void;
export const costmodels_to_cbor_bytes: (a: number) => [number, number];
export const costmodels_to_canonical_cbor_bytes: (a: number) => [number, number];
export const costmodels_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const costmodels_to_cbor_hex: (a: number) => [number, number];
export const costmodels_to_canonical_cbor_hex: (a: number) => [number, number];
export const costmodels_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const costmodels_to_json: (a: number) => [number, number, number, number];
export const costmodels_to_js_value: (a: number) => [number, number, number];
export const costmodels_from_json: (a: number, b: number) => [number, number, number];
export const costmodels_inner: (a: number) => number;
export const __wbg_exunitprices_free: (a: number, b: number) => void;
export const exunitprices_to_cbor_bytes: (a: number) => [number, number];
export const exunitprices_to_canonical_cbor_bytes: (a: number) => [number, number];
export const exunitprices_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const exunitprices_to_cbor_hex: (a: number) => [number, number];
export const exunitprices_to_canonical_cbor_hex: (a: number) => [number, number];
export const exunitprices_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const exunitprices_to_json: (a: number) => [number, number, number, number];
export const exunitprices_to_js_value: (a: number) => [number, number, number];
export const exunitprices_from_json: (a: number, b: number) => [number, number, number];
export const exunitprices_mem_price: (a: number) => number;
export const exunitprices_step_price: (a: number) => number;
export const exunitprices_new: (a: number, b: number) => number;
export const __wbg_exunits_free: (a: number, b: number) => void;
export const exunits_to_cbor_bytes: (a: number) => [number, number];
export const exunits_to_canonical_cbor_bytes: (a: number) => [number, number];
export const exunits_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const exunits_to_cbor_hex: (a: number) => [number, number];
export const exunits_to_canonical_cbor_hex: (a: number) => [number, number];
export const exunits_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const exunits_to_json: (a: number) => [number, number, number, number];
export const exunits_to_js_value: (a: number) => [number, number, number];
export const exunits_from_json: (a: number, b: number) => [number, number, number];
export const exunits_mem: (a: number) => bigint;
export const exunits_steps: (a: number) => bigint;
export const exunits_new: (a: bigint, b: bigint) => number;
export const __wbg_legacyredeemer_free: (a: number, b: number) => void;
export const legacyredeemer_to_cbor_bytes: (a: number) => [number, number];
export const legacyredeemer_to_canonical_cbor_bytes: (a: number) => [number, number];
export const legacyredeemer_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const legacyredeemer_to_cbor_hex: (a: number) => [number, number];
export const legacyredeemer_to_canonical_cbor_hex: (a: number) => [number, number];
export const legacyredeemer_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const legacyredeemer_to_json: (a: number) => [number, number, number, number];
export const legacyredeemer_to_js_value: (a: number) => [number, number, number];
export const legacyredeemer_from_json: (a: number, b: number) => [number, number, number];
export const legacyredeemer_tag: (a: number) => number;
export const legacyredeemer_index: (a: number) => bigint;
export const legacyredeemer_data: (a: number) => number;
export const legacyredeemer_ex_units: (a: number) => number;
export const legacyredeemer_new: (a: number, b: bigint, c: number, d: number) => number;
export const __wbg_plutusdata_free: (a: number, b: number) => void;
export const plutusdata_to_cbor_bytes: (a: number) => [number, number];
export const plutusdata_to_canonical_cbor_bytes: (a: number) => [number, number];
export const plutusdata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const plutusdata_to_cbor_hex: (a: number) => [number, number];
export const plutusdata_to_canonical_cbor_hex: (a: number) => [number, number];
export const plutusdata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const plutusdata_to_json: (a: number) => [number, number, number, number];
export const plutusdata_to_js_value: (a: number) => [number, number, number];
export const plutusdata_from_json: (a: number, b: number) => [number, number, number];
export const plutusdata_new_constr_plutus_data: (a: number) => number;
export const plutusdata_new_map: (a: number) => number;
export const plutusdata_new_list: (a: number) => number;
export const plutusdata_new_integer: (a: number) => number;
export const plutusdata_new_bytes: (a: number, b: number) => number;
export const plutusdata_kind: (a: number) => number;
export const plutusdata_as_constr_plutus_data: (a: number) => number;
export const plutusdata_as_map: (a: number) => number;
export const plutusdata_as_list: (a: number) => number;
export const plutusdata_as_integer: (a: number) => number;
export const plutusdata_as_bytes: (a: number) => [number, number];
export const __wbg_plutusv1script_free: (a: number, b: number) => void;
export const plutusv1script_to_cbor_bytes: (a: number) => [number, number];
export const plutusv1script_to_canonical_cbor_bytes: (a: number) => [number, number];
export const plutusv1script_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const plutusv1script_to_cbor_hex: (a: number) => [number, number];
export const plutusv1script_to_canonical_cbor_hex: (a: number) => [number, number];
export const plutusv1script_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const plutusv1script_to_json: (a: number) => [number, number, number, number];
export const plutusv1script_to_js_value: (a: number) => [number, number, number];
export const plutusv1script_from_json: (a: number, b: number) => [number, number, number];
export const __wbg_plutusv2script_free: (a: number, b: number) => void;
export const plutusv2script_to_cbor_bytes: (a: number) => [number, number];
export const plutusv2script_to_canonical_cbor_bytes: (a: number) => [number, number];
export const plutusv2script_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const plutusv2script_to_cbor_hex: (a: number) => [number, number];
export const plutusv2script_to_canonical_cbor_hex: (a: number) => [number, number];
export const plutusv2script_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const plutusv2script_to_json: (a: number) => [number, number, number, number];
export const plutusv2script_to_js_value: (a: number) => [number, number, number];
export const plutusv2script_from_json: (a: number, b: number) => [number, number, number];
export const __wbg_plutusv3script_free: (a: number, b: number) => void;
export const plutusv3script_to_cbor_bytes: (a: number) => [number, number];
export const plutusv3script_to_canonical_cbor_bytes: (a: number) => [number, number];
export const plutusv3script_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const plutusv3script_to_cbor_hex: (a: number) => [number, number];
export const plutusv3script_to_canonical_cbor_hex: (a: number) => [number, number];
export const plutusv3script_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const plutusv3script_to_json: (a: number) => [number, number, number, number];
export const plutusv3script_to_js_value: (a: number) => [number, number, number];
export const plutusv3script_from_json: (a: number, b: number) => [number, number, number];
export const __wbg_redeemerkey_free: (a: number, b: number) => void;
export const redeemerkey_to_cbor_bytes: (a: number) => [number, number];
export const redeemerkey_to_canonical_cbor_bytes: (a: number) => [number, number];
export const redeemerkey_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const redeemerkey_to_cbor_hex: (a: number) => [number, number];
export const redeemerkey_to_canonical_cbor_hex: (a: number) => [number, number];
export const redeemerkey_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const redeemerkey_to_json: (a: number) => [number, number, number, number];
export const redeemerkey_to_js_value: (a: number) => [number, number, number];
export const redeemerkey_from_json: (a: number, b: number) => [number, number, number];
export const redeemerkey_tag: (a: number) => number;
export const redeemerkey_index: (a: number) => bigint;
export const redeemerkey_new: (a: number, b: bigint) => number;
export const __wbg_redeemerval_free: (a: number, b: number) => void;
export const redeemerval_to_cbor_bytes: (a: number) => [number, number];
export const redeemerval_to_canonical_cbor_bytes: (a: number) => [number, number];
export const redeemerval_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const redeemerval_to_cbor_hex: (a: number) => [number, number];
export const redeemerval_to_canonical_cbor_hex: (a: number) => [number, number];
export const redeemerval_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const redeemerval_to_json: (a: number) => [number, number, number, number];
export const redeemerval_to_js_value: (a: number) => [number, number, number];
export const redeemerval_from_json: (a: number, b: number) => [number, number, number];
export const redeemerval_data: (a: number) => number;
export const redeemerval_ex_units: (a: number) => number;
export const redeemerval_new: (a: number, b: number) => number;
export const __wbg_redeemers_free: (a: number, b: number) => void;
export const redeemers_to_cbor_bytes: (a: number) => [number, number];
export const redeemers_to_canonical_cbor_bytes: (a: number) => [number, number];
export const redeemers_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const redeemers_to_cbor_hex: (a: number) => [number, number];
export const redeemers_to_canonical_cbor_hex: (a: number) => [number, number];
export const redeemers_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const redeemers_to_json: (a: number) => [number, number, number, number];
export const redeemers_to_js_value: (a: number) => [number, number, number];
export const redeemers_from_json: (a: number, b: number) => [number, number, number];
export const redeemers_new_arr_legacy_redeemer: (a: number) => number;
export const redeemers_new_map_redeemer_key_to_redeemer_val: (a: number) => number;
export const redeemers_kind: (a: number) => number;
export const redeemers_as_arr_legacy_redeemer: (a: number) => number;
export const redeemers_as_map_redeemer_key_to_redeemer_val: (a: number) => number;
export const __wbg_metadatumlist_free: (a: number, b: number) => void;
export const metadatumlist_new: () => number;
export const metadatumlist_len: (a: number) => number;
export const metadatumlist_get: (a: number, b: number) => number;
export const metadatumlist_add: (a: number, b: number) => void;
export const __wbg_transactionmetadatumlabels_free: (a: number, b: number) => void;
export const transactionmetadatumlabels_new: () => number;
export const transactionmetadatumlabels_len: (a: number) => number;
export const transactionmetadatumlabels_get: (a: number, b: number) => bigint;
export const transactionmetadatumlabels_add: (a: number, b: bigint) => void;
export const __wbg_metadatummap_free: (a: number, b: number) => void;
export const metadatummap_new: () => number;
export const metadatummap_len: (a: number) => number;
export const metadatummap_set: (a: number, b: number, c: number) => void;
export const metadatummap_get: (a: number, b: number) => number;
export const metadatummap_get_all: (a: number, b: number) => number;
export const metadatummap_keys: (a: number) => number;
export const __wbg_transactionmetadatumlist_free: (a: number, b: number) => void;
export const transactionmetadatumlist_new: () => number;
export const transactionmetadatumlist_len: (a: number) => number;
export const transactionmetadatumlist_get: (a: number, b: number) => number;
export const transactionmetadatumlist_add: (a: number, b: number) => void;
export const __wbg_metadata_free: (a: number, b: number) => void;
export const metadata_new: () => number;
export const metadata_len: (a: number) => number;
export const metadata_set: (a: number, b: bigint, c: number) => void;
export const metadata_get: (a: number, b: bigint) => number;
export const metadata_get_all: (a: number, b: bigint) => number;
export const metadata_labels: (a: number) => number;
export const __wbg_transactionmetadatum_free: (a: number, b: number) => void;
export const transactionmetadatum_to_cbor_bytes: (a: number) => [number, number];
export const transactionmetadatum_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const transactionmetadatum_to_json: (a: number) => [number, number, number, number];
export const transactionmetadatum_to_json_value: (a: number) => [number, number, number];
export const transactionmetadatum_from_json: (a: number, b: number) => [number, number, number];
export const transactionmetadatum_new_map: (a: number) => number;
export const transactionmetadatum_new_list: (a: number) => number;
export const transactionmetadatum_new_int: (a: number) => number;
export const transactionmetadatum_new_bytes: (a: number, b: number) => [number, number, number];
export const transactionmetadatum_new_text: (a: number, b: number) => [number, number, number];
export const transactionmetadatum_kind: (a: number) => number;
export const transactionmetadatum_as_map: (a: number) => number;
export const transactionmetadatum_as_list: (a: number) => number;
export const transactionmetadatum_as_int: (a: number) => number;
export const transactionmetadatum_as_bytes: (a: number) => [number, number];
export const transactionmetadatum_as_text: (a: number) => [number, number];
export const encode_arbitrary_bytes_as_metadatum: (a: number, b: number) => number;
export const decode_arbitrary_bytes_from_metadatum: (a: number) => [number, number];
export const __wbg_linearfee_free: (a: number, b: number) => void;
export const linearfee_new: (a: bigint, b: bigint, c: bigint) => number;
export const linearfee_coefficient: (a: number) => bigint;
export const linearfee_constant: (a: number) => bigint;
export const linearfee_ref_script_cost_per_byte: (a: number) => bigint;
export const min_script_fee: (a: number, b: number) => [bigint, number, number];
export const min_no_script_fee: (a: number, b: number) => [bigint, number, number];
export const min_fee: (a: number, b: number, c: number, d: bigint) => [bigint, number, number];
export const __wbg_languagelist_free: (a: number, b: number) => void;
export const languagelist_new: () => number;
export const languagelist_len: (a: number) => number;
export const languagelist_get: (a: number, b: number) => number;
export const languagelist_add: (a: number, b: number) => void;
export const __wbg_biginteger_free: (a: number, b: number) => void;
export const biginteger_to_cbor_bytes: (a: number) => [number, number];
export const biginteger_to_canonical_cbor_bytes: (a: number) => [number, number];
export const biginteger_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const biginteger_to_cbor_hex: (a: number) => [number, number];
export const biginteger_to_canonical_cbor_hex: (a: number) => [number, number];
export const biginteger_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const biginteger_to_json: (a: number) => [number, number, number, number];
export const biginteger_to_js_value: (a: number) => [number, number, number];
export const biginteger_from_json: (a: number, b: number) => [number, number, number];
export const biginteger_from_int: (a: number) => number;
export const biginteger_from_str: (a: number, b: number) => [number, number, number];
export const biginteger_to_str: (a: number) => [number, number];
export const biginteger_as_u64: (a: number) => [number, bigint];
export const biginteger_as_int: (a: number) => number;
export const script_hash: (a: number) => number;
export const script_language: (a: number) => number;
export const __wbg_networkid_free: (a: number, b: number) => void;
export const networkid_to_cbor_bytes: (a: number) => [number, number];
export const networkid_to_canonical_cbor_bytes: (a: number) => [number, number];
export const networkid_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const networkid_to_cbor_hex: (a: number) => [number, number];
export const networkid_to_canonical_cbor_hex: (a: number) => [number, number];
export const networkid_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const networkid_to_json: (a: number) => [number, number, number, number];
export const networkid_to_js_value: (a: number) => [number, number, number];
export const networkid_from_json: (a: number, b: number) => [number, number, number];
export const networkid_new: (a: bigint) => number;
export const networkid_mainnet: () => number;
export const networkid_testnet: () => number;
export const networkid_network: (a: number) => bigint;
export const subcoin_from_base10_f32: (a: number) => number;
export const __wbg_assetname_free: (a: number, b: number) => void;
export const assetname_to_cbor_bytes: (a: number) => [number, number];
export const assetname_to_canonical_cbor_bytes: (a: number) => [number, number];
export const assetname_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const assetname_to_cbor_hex: (a: number) => [number, number];
export const assetname_to_canonical_cbor_hex: (a: number) => [number, number];
export const assetname_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const assetname_to_json: (a: number) => [number, number, number, number];
export const assetname_to_js_value: (a: number) => [number, number, number];
export const assetname_from_json: (a: number, b: number) => [number, number, number];
export const __wbg_mintbuilderresult_free: (a: number, b: number) => void;
export const __wbg_singlemintbuilder_free: (a: number, b: number) => void;
export const singlemintbuilder_new: (a: number) => number;
export const singlemintbuilder_new_single_asset: (a: number, b: bigint) => number;
export const singlemintbuilder_native_script: (a: number, b: number, c: number) => number;
export const singlemintbuilder_plutus_script: (a: number, b: number, c: number) => number;
export const __wbg_votebuilderresult_free: (a: number, b: number) => void;
export const __wbg_votebuilder_free: (a: number, b: number) => void;
export const votebuilder_new: () => number;
export const votebuilder_with_vote: (a: number, b: number, c: number, d: number) => [number, number, number];
export const votebuilder_with_native_script_vote: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number];
export const votebuilder_with_plutus_vote: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number];
export const votebuilder_with_plutus_vote_inline_datum: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number];
export const votebuilder_build: (a: number) => number;
export const __wbg_addrattributes_free: (a: number, b: number) => void;
export const addrattributes_to_cbor_bytes: (a: number) => [number, number];
export const addrattributes_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const addrattributes_to_cbor_hex: (a: number) => [number, number];
export const addrattributes_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const addrattributes_set_stake_distribution: (a: number, b: number) => void;
export const addrattributes_stake_distribution: (a: number) => number;
export const addrattributes_set_derivation_path: (a: number, b: number) => void;
export const addrattributes_derivation_path: (a: number) => number;
export const addrattributes_set_protocol_magic: (a: number, b: number) => void;
export const addrattributes_protocol_magic: (a: number) => number;
export const addrattributes_new: () => number;
export const __wbg_addresscontent_free: (a: number, b: number) => void;
export const addresscontent_to_cbor_bytes: (a: number) => [number, number];
export const addresscontent_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const addresscontent_to_cbor_hex: (a: number) => [number, number];
export const addresscontent_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const addresscontent_address_id: (a: number) => number;
export const addresscontent_addr_attributes: (a: number) => number;
export const addresscontent_addr_type: (a: number) => number;
export const addresscontent_new: (a: number, b: number, c: number) => number;
export const __wbg_byronaddress_free: (a: number, b: number) => void;
export const byronaddress_to_cbor_bytes: (a: number) => [number, number];
export const byronaddress_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const byronaddress_to_cbor_hex: (a: number) => [number, number];
export const byronaddress_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const byronaddress_content: (a: number) => number;
export const byronaddress_crc: (a: number) => number;
export const byronaddress_new: (a: number, b: number) => number;
export const __wbg_hdaddresspayload_free: (a: number, b: number) => void;
export const hdaddresspayload_to_cbor_bytes: (a: number) => [number, number];
export const hdaddresspayload_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const hdaddresspayload_to_cbor_hex: (a: number) => [number, number];
export const hdaddresspayload_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const hdaddresspayload_get: (a: number) => [number, number];
export const __wbg_spendingdata_free: (a: number, b: number) => void;
export const spendingdata_to_cbor_bytes: (a: number) => [number, number];
export const spendingdata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const spendingdata_to_cbor_hex: (a: number) => [number, number];
export const spendingdata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const spendingdata_new_spending_data_pub_key: (a: number) => number;
export const spendingdata_new_spending_data_script: (a: number) => number;
export const spendingdata_new_spending_data_redeem: (a: number) => number;
export const spendingdata_kind: (a: number) => number;
export const spendingdata_as_spending_data_pub_key: (a: number) => number;
export const spendingdata_as_spending_data_script: (a: number) => number;
export const spendingdata_as_spending_data_redeem: (a: number) => number;
export const __wbg_stakedistribution_free: (a: number, b: number) => void;
export const stakedistribution_to_cbor_bytes: (a: number) => [number, number];
export const stakedistribution_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakedistribution_to_cbor_hex: (a: number) => [number, number];
export const stakedistribution_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakedistribution_new_single_key: (a: number) => number;
export const stakedistribution_new_bootstrap_era: () => number;
export const stakedistribution_kind: (a: number) => number;
export const stakedistribution_as_single_key: (a: number) => number;
export const __wbg_byrontxout_free: (a: number, b: number) => void;
export const byrontxout_to_cbor_bytes: (a: number) => [number, number];
export const byrontxout_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const byrontxout_to_cbor_hex: (a: number) => [number, number];
export const byrontxout_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const byrontxout_address: (a: number) => number;
export const byrontxout_amount: (a: number) => bigint;
export const byrontxout_new: (a: number, b: bigint) => number;
export const bootstrapwitness_to_address: (a: number) => [number, number, number];
export const make_vkey_witness: (a: number, b: number) => number;
export const govaction_script_hash: (a: number) => number;
export const voter_key_hash: (a: number) => number;
export const voter_script_hash: (a: number) => number;
export const __wbg_assetnamelist_free: (a: number, b: number) => void;
export const assetnamelist_new: () => number;
export const assetnamelist_len: (a: number) => number;
export const assetnamelist_get: (a: number, b: number) => number;
export const assetnamelist_add: (a: number, b: number) => void;
export const __wbg_bootstrapwitnesslist_free: (a: number, b: number) => void;
export const bootstrapwitnesslist_new: () => number;
export const bootstrapwitnesslist_len: (a: number) => number;
export const bootstrapwitnesslist_get: (a: number, b: number) => number;
export const bootstrapwitnesslist_add: (a: number, b: number) => void;
export const __wbg_certificatelist_free: (a: number, b: number) => void;
export const certificatelist_new: () => number;
export const certificatelist_len: (a: number) => number;
export const certificatelist_get: (a: number, b: number) => number;
export const certificatelist_add: (a: number, b: number) => void;
export const __wbg_committeecoldcredentiallist_free: (a: number, b: number) => void;
export const committeecoldcredentiallist_new: () => number;
export const committeecoldcredentiallist_len: (a: number) => number;
export const committeecoldcredentiallist_get: (a: number, b: number) => number;
export const committeecoldcredentiallist_add: (a: number, b: number) => void;
export const __wbg_drepvotingthresholds_free: (a: number, b: number) => void;
export const drepvotingthresholds_to_cbor_bytes: (a: number) => [number, number];
export const drepvotingthresholds_to_canonical_cbor_bytes: (a: number) => [number, number];
export const drepvotingthresholds_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const drepvotingthresholds_to_cbor_hex: (a: number) => [number, number];
export const drepvotingthresholds_to_canonical_cbor_hex: (a: number) => [number, number];
export const drepvotingthresholds_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const drepvotingthresholds_to_json: (a: number) => [number, number, number, number];
export const drepvotingthresholds_to_js_value: (a: number) => [number, number, number];
export const drepvotingthresholds_from_json: (a: number, b: number) => [number, number, number];
export const drepvotingthresholds_motion_no_confidence: (a: number) => number;
export const drepvotingthresholds_committee_normal: (a: number) => number;
export const drepvotingthresholds_committee_no_confidence: (a: number) => number;
export const drepvotingthresholds_update_constitution: (a: number) => number;
export const drepvotingthresholds_hard_fork_initiation: (a: number) => number;
export const drepvotingthresholds_pp_network_group: (a: number) => number;
export const drepvotingthresholds_pp_economic_group: (a: number) => number;
export const drepvotingthresholds_pp_technical_group: (a: number) => number;
export const drepvotingthresholds_pp_governance_group: (a: number) => number;
export const drepvotingthresholds_treasury_withdrawal: (a: number) => number;
export const drepvotingthresholds_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => number;
export const __wbg_ed25519keyhashlist_free: (a: number, b: number) => void;
export const ed25519keyhashlist_new: () => number;
export const ed25519keyhashlist_len: (a: number) => number;
export const ed25519keyhashlist_get: (a: number, b: number) => number;
export const ed25519keyhashlist_add: (a: number, b: number) => void;
export const __wbg_govactionidlist_free: (a: number, b: number) => void;
export const govactionidlist_new: () => number;
export const govactionidlist_len: (a: number) => number;
export const govactionidlist_get: (a: number, b: number) => number;
export const govactionidlist_add: (a: number, b: number) => void;
export const __wbg_intlist_free: (a: number, b: number) => void;
export const intlist_new: () => number;
export const intlist_len: (a: number) => number;
export const intlist_get: (a: number, b: number) => number;
export const intlist_add: (a: number, b: number) => void;
export const __wbg_legacyredeemerlist_free: (a: number, b: number) => void;
export const legacyredeemerlist_new: () => number;
export const legacyredeemerlist_len: (a: number) => number;
export const legacyredeemerlist_get: (a: number, b: number) => number;
export const legacyredeemerlist_add: (a: number, b: number) => void;
export const __wbg_mapassetnametononzeroint64_free: (a: number, b: number) => void;
export const mapassetnametononzeroint64_new: () => number;
export const mapassetnametononzeroint64_len: (a: number) => number;
export const mapassetnametononzeroint64_insert: (a: number, b: number, c: bigint) => [number, bigint];
export const mapassetnametononzeroint64_get: (a: number, b: number) => [number, bigint];
export const mapassetnametononzeroint64_keys: (a: number) => number;
export const __wbg_mapassetnametou64_free: (a: number, b: number) => void;
export const mapassetnametou64_new: () => number;
export const mapassetnametou64_len: (a: number) => number;
export const mapassetnametou64_insert: (a: number, b: number, c: bigint) => [number, bigint];
export const mapassetnametou64_get: (a: number, b: number) => [number, bigint];
export const mapassetnametou64_keys: (a: number) => number;
export const __wbg_mapcommitteecoldcredentialtoepoch_free: (a: number, b: number) => void;
export const mapcommitteecoldcredentialtoepoch_new: () => number;
export const mapcommitteecoldcredentialtoepoch_len: (a: number) => number;
export const mapcommitteecoldcredentialtoepoch_insert: (a: number, b: number, c: bigint) => [number, bigint];
export const mapcommitteecoldcredentialtoepoch_get: (a: number, b: number) => [number, bigint];
export const mapcommitteecoldcredentialtoepoch_keys: (a: number) => number;
export const __wbg_mapgovactionidtovotingprocedure_free: (a: number, b: number) => void;
export const mapgovactionidtovotingprocedure_new: () => number;
export const mapgovactionidtovotingprocedure_len: (a: number) => number;
export const mapgovactionidtovotingprocedure_insert: (a: number, b: number, c: number) => number;
export const mapgovactionidtovotingprocedure_get: (a: number, b: number) => number;
export const mapgovactionidtovotingprocedure_keys: (a: number) => number;
export const __wbg_mapplutusdatatoplutusdata_free: (a: number, b: number) => void;
export const mapplutusdatatoplutusdata_new: () => number;
export const mapplutusdatatoplutusdata_len: (a: number) => number;
export const mapplutusdatatoplutusdata_insert: (a: number, b: number, c: number) => number;
export const mapplutusdatatoplutusdata_get: (a: number, b: number) => number;
export const mapplutusdatatoplutusdata_keys: (a: number) => number;
export const __wbg_mapredeemerkeytoredeemerval_free: (a: number, b: number) => void;
export const mapredeemerkeytoredeemerval_new: () => number;
export const mapredeemerkeytoredeemerval_len: (a: number) => number;
export const mapredeemerkeytoredeemerval_insert: (a: number, b: number, c: number) => number;
export const mapredeemerkeytoredeemerval_get: (a: number, b: number) => number;
export const mapredeemerkeytoredeemerval_keys: (a: number) => number;
export const __wbg_maprewardaccounttocoin_free: (a: number, b: number) => void;
export const maprewardaccounttocoin_new: () => number;
export const maprewardaccounttocoin_len: (a: number) => number;
export const maprewardaccounttocoin_insert: (a: number, b: number, c: bigint) => [number, bigint];
export const maprewardaccounttocoin_get: (a: number, b: number) => [number, bigint];
export const maprewardaccounttocoin_keys: (a: number) => number;
export const __wbg_mapstakecredentialtodeltacoin_free: (a: number, b: number) => void;
export const mapstakecredentialtodeltacoin_new: () => number;
export const mapstakecredentialtodeltacoin_len: (a: number) => number;
export const mapstakecredentialtodeltacoin_insert: (a: number, b: number, c: number) => number;
export const mapstakecredentialtodeltacoin_get: (a: number, b: number) => number;
export const mapstakecredentialtodeltacoin_keys: (a: number) => number;
export const __wbg_maptransactionindextoauxiliarydata_free: (a: number, b: number) => void;
export const maptransactionindextoauxiliarydata_new: () => number;
export const maptransactionindextoauxiliarydata_len: (a: number) => number;
export const maptransactionindextoauxiliarydata_insert: (a: number, b: number, c: number) => number;
export const maptransactionindextoauxiliarydata_get: (a: number, b: number) => number;
export const maptransactionindextoauxiliarydata_keys: (a: number) => [number, number];
export const __wbg_maptransactionmetadatumtotransactionmetadatum_free: (a: number, b: number) => void;
export const maptransactionmetadatumtotransactionmetadatum_new: () => number;
export const maptransactionmetadatumtotransactionmetadatum_len: (a: number) => number;
export const maptransactionmetadatumtotransactionmetadatum_insert: (a: number, b: number, c: number) => number;
export const maptransactionmetadatumtotransactionmetadatum_get: (a: number, b: number) => number;
export const maptransactionmetadatumtotransactionmetadatum_keys: (a: number) => number;
export const __wbg_nativescriptlist_free: (a: number, b: number) => void;
export const nativescriptlist_new: () => number;
export const nativescriptlist_len: (a: number) => number;
export const nativescriptlist_get: (a: number, b: number) => number;
export const nativescriptlist_add: (a: number, b: number) => void;
export const __wbg_plutusdatalist_free: (a: number, b: number) => void;
export const plutusdatalist_new: () => number;
export const plutusdatalist_len: (a: number) => number;
export const plutusdatalist_get: (a: number, b: number) => number;
export const plutusdatalist_add: (a: number, b: number) => void;
export const __wbg_plutusv1scriptlist_free: (a: number, b: number) => void;
export const plutusv1scriptlist_new: () => number;
export const plutusv1scriptlist_len: (a: number) => number;
export const plutusv1scriptlist_get: (a: number, b: number) => number;
export const plutusv1scriptlist_add: (a: number, b: number) => void;
export const __wbg_plutusv2scriptlist_free: (a: number, b: number) => void;
export const plutusv2scriptlist_new: () => number;
export const plutusv2scriptlist_len: (a: number) => number;
export const plutusv2scriptlist_get: (a: number, b: number) => number;
export const plutusv2scriptlist_add: (a: number, b: number) => void;
export const __wbg_plutusv3scriptlist_free: (a: number, b: number) => void;
export const plutusv3scriptlist_new: () => number;
export const plutusv3scriptlist_len: (a: number) => number;
export const plutusv3scriptlist_get: (a: number, b: number) => number;
export const plutusv3scriptlist_add: (a: number, b: number) => void;
export const __wbg_policyidlist_free: (a: number, b: number) => void;
export const policyidlist_new: () => number;
export const policyidlist_len: (a: number) => number;
export const policyidlist_get: (a: number, b: number) => number;
export const policyidlist_add: (a: number, b: number) => void;
export const __wbg_poolvotingthresholds_free: (a: number, b: number) => void;
export const poolvotingthresholds_to_cbor_bytes: (a: number) => [number, number];
export const poolvotingthresholds_to_canonical_cbor_bytes: (a: number) => [number, number];
export const poolvotingthresholds_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const poolvotingthresholds_to_cbor_hex: (a: number) => [number, number];
export const poolvotingthresholds_to_canonical_cbor_hex: (a: number) => [number, number];
export const poolvotingthresholds_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const poolvotingthresholds_to_json: (a: number) => [number, number, number, number];
export const poolvotingthresholds_to_js_value: (a: number) => [number, number, number];
export const poolvotingthresholds_from_json: (a: number, b: number) => [number, number, number];
export const poolvotingthresholds_motion_no_confidence: (a: number) => number;
export const poolvotingthresholds_committee_normal: (a: number) => number;
export const poolvotingthresholds_committee_no_confidence: (a: number) => number;
export const poolvotingthresholds_hard_fork_initiation: (a: number) => number;
export const poolvotingthresholds_security_relevant_parameter_voting_threshold: (a: number) => number;
export const poolvotingthresholds_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const __wbg_proposalprocedurelist_free: (a: number, b: number) => void;
export const proposalprocedurelist_new: () => number;
export const proposalprocedurelist_len: (a: number) => number;
export const proposalprocedurelist_get: (a: number, b: number) => number;
export const proposalprocedurelist_add: (a: number, b: number) => void;
export const __wbg_protocolparamupdate_free: (a: number, b: number) => void;
export const protocolparamupdate_to_cbor_bytes: (a: number) => [number, number];
export const protocolparamupdate_to_canonical_cbor_bytes: (a: number) => [number, number];
export const protocolparamupdate_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const protocolparamupdate_to_cbor_hex: (a: number) => [number, number];
export const protocolparamupdate_to_canonical_cbor_hex: (a: number) => [number, number];
export const protocolparamupdate_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const protocolparamupdate_to_json: (a: number) => [number, number, number, number];
export const protocolparamupdate_to_js_value: (a: number) => [number, number, number];
export const protocolparamupdate_from_json: (a: number, b: number) => [number, number, number];
export const protocolparamupdate_set_minfee_a: (a: number, b: bigint) => void;
export const protocolparamupdate_minfee_a: (a: number) => [number, bigint];
export const protocolparamupdate_set_minfee_b: (a: number, b: bigint) => void;
export const protocolparamupdate_minfee_b: (a: number) => [number, bigint];
export const protocolparamupdate_set_max_block_body_size: (a: number, b: bigint) => void;
export const protocolparamupdate_max_block_body_size: (a: number) => [number, bigint];
export const protocolparamupdate_set_max_transaction_size: (a: number, b: bigint) => void;
export const protocolparamupdate_max_transaction_size: (a: number) => [number, bigint];
export const protocolparamupdate_set_max_block_header_size: (a: number, b: bigint) => void;
export const protocolparamupdate_max_block_header_size: (a: number) => [number, bigint];
export const protocolparamupdate_set_key_deposit: (a: number, b: bigint) => void;
export const protocolparamupdate_key_deposit: (a: number) => [number, bigint];
export const protocolparamupdate_set_pool_deposit: (a: number, b: bigint) => void;
export const protocolparamupdate_pool_deposit: (a: number) => [number, bigint];
export const protocolparamupdate_set_maximum_epoch: (a: number, b: bigint) => void;
export const protocolparamupdate_maximum_epoch: (a: number) => [number, bigint];
export const protocolparamupdate_set_n_opt: (a: number, b: bigint) => void;
export const protocolparamupdate_n_opt: (a: number) => [number, bigint];
export const protocolparamupdate_set_pool_pledge_influence: (a: number, b: number) => void;
export const protocolparamupdate_pool_pledge_influence: (a: number) => number;
export const protocolparamupdate_set_expansion_rate: (a: number, b: number) => void;
export const protocolparamupdate_expansion_rate: (a: number) => number;
export const protocolparamupdate_set_treasury_growth_rate: (a: number, b: number) => void;
export const protocolparamupdate_treasury_growth_rate: (a: number) => number;
export const protocolparamupdate_set_min_pool_cost: (a: number, b: bigint) => void;
export const protocolparamupdate_min_pool_cost: (a: number) => [number, bigint];
export const protocolparamupdate_set_ada_per_utxo_byte: (a: number, b: bigint) => void;
export const protocolparamupdate_ada_per_utxo_byte: (a: number) => [number, bigint];
export const protocolparamupdate_set_cost_models_for_script_languages: (a: number, b: number) => void;
export const protocolparamupdate_cost_models_for_script_languages: (a: number) => number;
export const protocolparamupdate_set_execution_costs: (a: number, b: number) => void;
export const protocolparamupdate_execution_costs: (a: number) => number;
export const protocolparamupdate_set_max_tx_ex_units: (a: number, b: number) => void;
export const protocolparamupdate_max_tx_ex_units: (a: number) => number;
export const protocolparamupdate_set_max_block_ex_units: (a: number, b: number) => void;
export const protocolparamupdate_max_block_ex_units: (a: number) => number;
export const protocolparamupdate_set_max_value_size: (a: number, b: bigint) => void;
export const protocolparamupdate_max_value_size: (a: number) => [number, bigint];
export const protocolparamupdate_set_collateral_percentage: (a: number, b: bigint) => void;
export const protocolparamupdate_collateral_percentage: (a: number) => [number, bigint];
export const protocolparamupdate_set_max_collateral_inputs: (a: number, b: bigint) => void;
export const protocolparamupdate_max_collateral_inputs: (a: number) => [number, bigint];
export const protocolparamupdate_set_pool_voting_thresholds: (a: number, b: number) => void;
export const protocolparamupdate_pool_voting_thresholds: (a: number) => number;
export const protocolparamupdate_set_d_rep_voting_thresholds: (a: number, b: number) => void;
export const protocolparamupdate_d_rep_voting_thresholds: (a: number) => number;
export const protocolparamupdate_set_min_committee_size: (a: number, b: bigint) => void;
export const protocolparamupdate_min_committee_size: (a: number) => [number, bigint];
export const protocolparamupdate_set_committee_term_limit: (a: number, b: bigint) => void;
export const protocolparamupdate_committee_term_limit: (a: number) => [number, bigint];
export const protocolparamupdate_set_governance_action_validity_period: (a: number, b: bigint) => void;
export const protocolparamupdate_governance_action_validity_period: (a: number) => [number, bigint];
export const protocolparamupdate_set_governance_action_deposit: (a: number, b: bigint) => void;
export const protocolparamupdate_governance_action_deposit: (a: number) => [number, bigint];
export const protocolparamupdate_set_d_rep_deposit: (a: number, b: bigint) => void;
export const protocolparamupdate_d_rep_deposit: (a: number) => [number, bigint];
export const protocolparamupdate_set_d_rep_inactivity_period: (a: number, b: bigint) => void;
export const protocolparamupdate_d_rep_inactivity_period: (a: number) => [number, bigint];
export const protocolparamupdate_set_min_fee_ref_script_cost_per_byte: (a: number, b: number) => void;
export const protocolparamupdate_min_fee_ref_script_cost_per_byte: (a: number) => number;
export const protocolparamupdate_new: () => number;
export const __wbg_rational_free: (a: number, b: number) => void;
export const rational_to_cbor_bytes: (a: number) => [number, number];
export const rational_to_canonical_cbor_bytes: (a: number) => [number, number];
export const rational_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const rational_to_cbor_hex: (a: number) => [number, number];
export const rational_to_canonical_cbor_hex: (a: number) => [number, number];
export const rational_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const rational_to_json: (a: number) => [number, number, number, number];
export const rational_to_js_value: (a: number) => [number, number, number];
export const rational_from_json: (a: number, b: number) => [number, number, number];
export const rational_numerator: (a: number) => bigint;
export const rational_denominator: (a: number) => bigint;
export const rational_new: (a: bigint, b: bigint) => number;
export const __wbg_redeemerkeylist_free: (a: number, b: number) => void;
export const redeemerkeylist_new: () => number;
export const redeemerkeylist_len: (a: number) => number;
export const redeemerkeylist_get: (a: number, b: number) => number;
export const redeemerkeylist_add: (a: number, b: number) => void;
export const __wbg_relaylist_free: (a: number, b: number) => void;
export const relaylist_new: () => number;
export const relaylist_len: (a: number) => number;
export const relaylist_get: (a: number, b: number) => number;
export const relaylist_add: (a: number, b: number) => void;
export const __wbg_rewardaccountlist_free: (a: number, b: number) => void;
export const rewardaccountlist_new: () => number;
export const rewardaccountlist_len: (a: number) => number;
export const rewardaccountlist_get: (a: number, b: number) => number;
export const rewardaccountlist_add: (a: number, b: number) => void;
export const __wbg_script_free: (a: number, b: number) => void;
export const script_to_cbor_bytes: (a: number) => [number, number];
export const script_to_canonical_cbor_bytes: (a: number) => [number, number];
export const script_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const script_to_cbor_hex: (a: number) => [number, number];
export const script_to_canonical_cbor_hex: (a: number) => [number, number];
export const script_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const script_to_json: (a: number) => [number, number, number, number];
export const script_to_js_value: (a: number) => [number, number, number];
export const script_from_json: (a: number, b: number) => [number, number, number];
export const script_new_native: (a: number) => number;
export const script_new_plutus_v1: (a: number) => number;
export const script_new_plutus_v2: (a: number) => number;
export const script_new_plutus_v3: (a: number) => number;
export const script_kind: (a: number) => number;
export const script_as_native: (a: number) => number;
export const script_as_plutus_v1: (a: number) => number;
export const script_as_plutus_v2: (a: number) => number;
export const script_as_plutus_v3: (a: number) => number;
export const __wbg_stakecredentiallist_free: (a: number, b: number) => void;
export const stakecredentiallist_new: () => number;
export const stakecredentiallist_len: (a: number) => number;
export const stakecredentiallist_get: (a: number, b: number) => number;
export const stakecredentiallist_add: (a: number, b: number) => void;
export const __wbg_transactionbodylist_free: (a: number, b: number) => void;
export const transactionbodylist_new: () => number;
export const transactionbodylist_len: (a: number) => number;
export const transactionbodylist_get: (a: number, b: number) => number;
export const transactionbodylist_add: (a: number, b: number) => void;
export const __wbg_transactioninputlist_free: (a: number, b: number) => void;
export const transactioninputlist_new: () => number;
export const transactioninputlist_len: (a: number) => number;
export const transactioninputlist_get: (a: number, b: number) => number;
export const transactioninputlist_add: (a: number, b: number) => void;
export const __wbg_transactionoutputlist_free: (a: number, b: number) => void;
export const transactionoutputlist_new: () => number;
export const transactionoutputlist_len: (a: number) => number;
export const transactionoutputlist_get: (a: number, b: number) => number;
export const transactionoutputlist_add: (a: number, b: number) => void;
export const __wbg_transactionwitnesssetlist_free: (a: number, b: number) => void;
export const transactionwitnesssetlist_new: () => number;
export const transactionwitnesssetlist_len: (a: number) => number;
export const transactionwitnesssetlist_get: (a: number, b: number) => number;
export const transactionwitnesssetlist_add: (a: number, b: number) => void;
export const __wbg_unitinterval_free: (a: number, b: number) => void;
export const unitinterval_to_cbor_bytes: (a: number) => [number, number];
export const unitinterval_to_canonical_cbor_bytes: (a: number) => [number, number];
export const unitinterval_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const unitinterval_to_cbor_hex: (a: number) => [number, number];
export const unitinterval_to_canonical_cbor_hex: (a: number) => [number, number];
export const unitinterval_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const unitinterval_to_json: (a: number) => [number, number, number, number];
export const unitinterval_to_js_value: (a: number) => [number, number, number];
export const unitinterval_from_json: (a: number, b: number) => [number, number, number];
export const unitinterval_start: (a: number) => bigint;
export const unitinterval_end: (a: number) => bigint;
export const unitinterval_new: (a: bigint, b: bigint) => number;
export const __wbg_vkeywitnesslist_free: (a: number, b: number) => void;
export const vkeywitnesslist_new: () => number;
export const vkeywitnesslist_len: (a: number) => number;
export const vkeywitnesslist_get: (a: number, b: number) => number;
export const vkeywitnesslist_add: (a: number, b: number) => void;
export const __wbg_voterlist_free: (a: number, b: number) => void;
export const voterlist_new: () => number;
export const voterlist_len: (a: number) => number;
export const voterlist_get: (a: number, b: number) => number;
export const voterlist_add: (a: number, b: number) => void;
export const __wbg_address_free: (a: number, b: number) => void;
export const address_to_json: (a: number) => [number, number, number, number];
export const address_to_js_value: (a: number) => [number, number, number];
export const address_from_json: (a: number, b: number) => [number, number, number];
export const address_header: (a: number) => number;
export const address_header_matches_kind: (a: number, b: number) => number;
export const address_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const address_from_bech32: (a: number, b: number) => [number, number, number];
export const address_is_valid_bech32: (a: number, b: number) => number;
export const address_is_valid: (a: number, b: number) => number;
export const address_network_id: (a: number) => [number, number, number];
export const address_payment_cred: (a: number) => number;
export const address_staking_cred: (a: number) => number;
export const address_kind: (a: number) => number;
export const address_to_raw_bytes: (a: number) => [number, number];
export const address_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const address_to_hex: (a: number) => [number, number];
export const address_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_baseaddress_free: (a: number, b: number) => void;
export const baseaddress_new: (a: number, b: number, c: number) => number;
export const baseaddress_to_address: (a: number) => number;
export const baseaddress_from_address: (a: number) => number;
export const baseaddress_network_id: (a: number) => number;
export const baseaddress_payment: (a: number) => number;
export const baseaddress_stake: (a: number) => number;
export const __wbg_enterpriseaddress_free: (a: number, b: number) => void;
export const enterpriseaddress_new: (a: number, b: number) => number;
export const enterpriseaddress_to_address: (a: number) => number;
export const enterpriseaddress_from_address: (a: number) => number;
export const enterpriseaddress_network_id: (a: number) => number;
export const enterpriseaddress_payment: (a: number) => number;
export const __wbg_pointer_free: (a: number, b: number) => void;
export const __wbg_pointeraddress_free: (a: number, b: number) => void;
export const pointeraddress_new: (a: number, b: number, c: number) => number;
export const pointeraddress_to_address: (a: number) => number;
export const pointeraddress_from_address: (a: number) => number;
export const pointeraddress_network_id: (a: number) => number;
export const pointeraddress_payment: (a: number) => number;
export const pointeraddress_stake: (a: number) => number;
export const __wbg_rewardaddress_free: (a: number, b: number) => void;
export const rewardaddress_to_json: (a: number) => [number, number, number, number];
export const rewardaddress_to_js_value: (a: number) => [number, number, number];
export const rewardaddress_from_json: (a: number, b: number) => [number, number, number];
export const rewardaddress_new: (a: number, b: number) => number;
export const rewardaddress_to_address: (a: number) => number;
export const rewardaddress_from_address: (a: number) => number;
export const rewardaddress_network_id: (a: number) => number;
export const rewardaddress_payment: (a: number) => number;
export const __wbg_block_free: (a: number, b: number) => void;
export const block_to_cbor_bytes: (a: number) => [number, number];
export const block_to_canonical_cbor_bytes: (a: number) => [number, number];
export const block_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const block_to_cbor_hex: (a: number) => [number, number];
export const block_to_canonical_cbor_hex: (a: number) => [number, number];
export const block_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const block_to_json: (a: number) => [number, number, number, number];
export const block_to_js_value: (a: number) => [number, number, number];
export const block_from_json: (a: number, b: number) => [number, number, number];
export const block_header: (a: number) => number;
export const block_transaction_bodies: (a: number) => number;
export const block_transaction_witness_sets: (a: number) => number;
export const block_auxiliary_data_set: (a: number) => number;
export const block_invalid_transactions: (a: number) => [number, number];
export const block_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const __wbg_header_free: (a: number, b: number) => void;
export const header_to_cbor_bytes: (a: number) => [number, number];
export const header_to_canonical_cbor_bytes: (a: number) => [number, number];
export const header_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const header_to_cbor_hex: (a: number) => [number, number];
export const header_to_canonical_cbor_hex: (a: number) => [number, number];
export const header_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const header_to_json: (a: number) => [number, number, number, number];
export const header_to_js_value: (a: number) => [number, number, number];
export const header_from_json: (a: number, b: number) => [number, number, number];
export const header_header_body: (a: number) => number;
export const header_body_signature: (a: number) => number;
export const header_new: (a: number, b: number) => number;
export const __wbg_headerbody_free: (a: number, b: number) => void;
export const headerbody_to_cbor_bytes: (a: number) => [number, number];
export const headerbody_to_canonical_cbor_bytes: (a: number) => [number, number];
export const headerbody_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const headerbody_to_cbor_hex: (a: number) => [number, number];
export const headerbody_to_canonical_cbor_hex: (a: number) => [number, number];
export const headerbody_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const headerbody_to_json: (a: number) => [number, number, number, number];
export const headerbody_to_js_value: (a: number) => [number, number, number];
export const headerbody_from_json: (a: number, b: number) => [number, number, number];
export const headerbody_block_number: (a: number) => bigint;
export const headerbody_slot: (a: number) => bigint;
export const headerbody_prev_hash: (a: number) => number;
export const headerbody_issuer_vkey: (a: number) => number;
export const headerbody_vrf_vkey: (a: number) => number;
export const headerbody_vrf_result: (a: number) => number;
export const headerbody_block_body_size: (a: number) => bigint;
export const headerbody_block_body_hash: (a: number) => number;
export const headerbody_operational_cert: (a: number) => number;
export const headerbody_protocol_version: (a: number) => number;
export const headerbody_new: (a: bigint, b: bigint, c: number, d: number, e: number, f: number, g: bigint, h: number, i: number, j: number) => number;
export const __wbg_operationalcert_free: (a: number, b: number) => void;
export const operationalcert_to_cbor_bytes: (a: number) => [number, number];
export const operationalcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const operationalcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const operationalcert_to_cbor_hex: (a: number) => [number, number];
export const operationalcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const operationalcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const operationalcert_to_json: (a: number) => [number, number, number, number];
export const operationalcert_to_js_value: (a: number) => [number, number, number];
export const operationalcert_from_json: (a: number, b: number) => [number, number, number];
export const operationalcert_hot_vkey: (a: number) => number;
export const operationalcert_sequence_number: (a: number) => bigint;
export const operationalcert_kes_period: (a: number) => bigint;
export const operationalcert_sigma: (a: number) => number;
export const operationalcert_new: (a: number, b: bigint, c: bigint, d: number) => number;
export const __wbg_protocolversion_free: (a: number, b: number) => void;
export const protocolversion_to_cbor_bytes: (a: number) => [number, number];
export const protocolversion_to_canonical_cbor_bytes: (a: number) => [number, number];
export const protocolversion_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const protocolversion_to_cbor_hex: (a: number) => [number, number];
export const protocolversion_to_canonical_cbor_hex: (a: number) => [number, number];
export const protocolversion_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const protocolversion_to_json: (a: number) => [number, number, number, number];
export const protocolversion_to_js_value: (a: number) => [number, number, number];
export const protocolversion_from_json: (a: number, b: number) => [number, number, number];
export const protocolversion_major: (a: number) => bigint;
export const protocolversion_minor: (a: number) => bigint;
export const protocolversion_new: (a: bigint, b: bigint) => number;
export const __wbg_crc32_free: (a: number, b: number) => void;
export const crc32_new: () => number;
export const crc32_update: (a: number, b: number, c: number) => void;
export const crc32_finalize: (a: number) => number;
export const __wbg_authcommitteehotcert_free: (a: number, b: number) => void;
export const authcommitteehotcert_to_cbor_bytes: (a: number) => [number, number];
export const authcommitteehotcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const authcommitteehotcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const authcommitteehotcert_to_cbor_hex: (a: number) => [number, number];
export const authcommitteehotcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const authcommitteehotcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const authcommitteehotcert_to_json: (a: number) => [number, number, number, number];
export const authcommitteehotcert_to_js_value: (a: number) => [number, number, number];
export const authcommitteehotcert_from_json: (a: number, b: number) => [number, number, number];
export const authcommitteehotcert_committee_cold_credential: (a: number) => number;
export const authcommitteehotcert_committee_hot_credential: (a: number) => number;
export const authcommitteehotcert_new: (a: number, b: number) => number;
export const __wbg_certificate_free: (a: number, b: number) => void;
export const certificate_to_cbor_bytes: (a: number) => [number, number];
export const certificate_to_canonical_cbor_bytes: (a: number) => [number, number];
export const certificate_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const certificate_to_cbor_hex: (a: number) => [number, number];
export const certificate_to_canonical_cbor_hex: (a: number) => [number, number];
export const certificate_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const certificate_to_json: (a: number) => [number, number, number, number];
export const certificate_to_js_value: (a: number) => [number, number, number];
export const certificate_from_json: (a: number, b: number) => [number, number, number];
export const certificate_new_stake_registration: (a: number) => number;
export const certificate_new_stake_deregistration: (a: number) => number;
export const certificate_new_stake_delegation: (a: number, b: number) => number;
export const certificate_new_pool_registration: (a: number) => number;
export const certificate_new_pool_retirement: (a: number, b: bigint) => number;
export const certificate_new_reg_cert: (a: number, b: bigint) => number;
export const certificate_new_unreg_cert: (a: number, b: bigint) => number;
export const certificate_new_vote_deleg_cert: (a: number, b: number) => number;
export const certificate_new_stake_vote_deleg_cert: (a: number, b: number, c: number) => number;
export const certificate_new_stake_reg_deleg_cert: (a: number, b: number, c: bigint) => number;
export const certificate_new_vote_reg_deleg_cert: (a: number, b: number, c: bigint) => number;
export const certificate_new_stake_vote_reg_deleg_cert: (a: number, b: number, c: number, d: bigint) => number;
export const certificate_new_auth_committee_hot_cert: (a: number, b: number) => number;
export const certificate_new_resign_committee_cold_cert: (a: number, b: number) => number;
export const certificate_new_reg_drep_cert: (a: number, b: bigint, c: number) => number;
export const certificate_new_unreg_drep_cert: (a: number, b: bigint) => number;
export const certificate_new_update_drep_cert: (a: number, b: number) => number;
export const certificate_kind: (a: number) => number;
export const certificate_as_stake_registration: (a: number) => number;
export const certificate_as_stake_deregistration: (a: number) => number;
export const certificate_as_stake_delegation: (a: number) => number;
export const certificate_as_pool_registration: (a: number) => number;
export const certificate_as_pool_retirement: (a: number) => number;
export const certificate_as_reg_cert: (a: number) => number;
export const certificate_as_unreg_cert: (a: number) => number;
export const certificate_as_vote_deleg_cert: (a: number) => number;
export const certificate_as_stake_vote_deleg_cert: (a: number) => number;
export const certificate_as_stake_reg_deleg_cert: (a: number) => number;
export const certificate_as_vote_reg_deleg_cert: (a: number) => number;
export const certificate_as_stake_vote_reg_deleg_cert: (a: number) => number;
export const certificate_as_auth_committee_hot_cert: (a: number) => number;
export const certificate_as_resign_committee_cold_cert: (a: number) => number;
export const certificate_as_reg_drep_cert: (a: number) => number;
export const certificate_as_unreg_drep_cert: (a: number) => number;
export const certificate_as_update_drep_cert: (a: number) => number;
export const __wbg_credential_free: (a: number, b: number) => void;
export const credential_to_cbor_bytes: (a: number) => [number, number];
export const credential_to_canonical_cbor_bytes: (a: number) => [number, number];
export const credential_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const credential_to_cbor_hex: (a: number) => [number, number];
export const credential_to_canonical_cbor_hex: (a: number) => [number, number];
export const credential_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const credential_to_json: (a: number) => [number, number, number, number];
export const credential_to_js_value: (a: number) => [number, number, number];
export const credential_from_json: (a: number, b: number) => [number, number, number];
export const credential_new_pub_key: (a: number) => number;
export const credential_new_script: (a: number) => number;
export const credential_kind: (a: number) => number;
export const credential_as_pub_key: (a: number) => number;
export const credential_as_script: (a: number) => number;
export const __wbg_dnsname_free: (a: number, b: number) => void;
export const dnsname_to_cbor_bytes: (a: number) => [number, number];
export const dnsname_to_canonical_cbor_bytes: (a: number) => [number, number];
export const dnsname_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const dnsname_to_cbor_hex: (a: number) => [number, number];
export const dnsname_to_canonical_cbor_hex: (a: number) => [number, number];
export const dnsname_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const dnsname_to_json: (a: number) => [number, number, number, number];
export const dnsname_to_js_value: (a: number) => [number, number, number];
export const dnsname_from_json: (a: number, b: number) => [number, number, number];
export const dnsname_get: (a: number) => [number, number];
export const __wbg_drep_free: (a: number, b: number) => void;
export const drep_to_cbor_bytes: (a: number) => [number, number];
export const drep_to_canonical_cbor_bytes: (a: number) => [number, number];
export const drep_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const drep_to_cbor_hex: (a: number) => [number, number];
export const drep_to_canonical_cbor_hex: (a: number) => [number, number];
export const drep_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const drep_to_json: (a: number) => [number, number, number, number];
export const drep_to_js_value: (a: number) => [number, number, number];
export const drep_from_json: (a: number, b: number) => [number, number, number];
export const drep_new_key: (a: number) => number;
export const drep_new_script: (a: number) => number;
export const drep_new_always_abstain: () => number;
export const drep_new_always_no_confidence: () => number;
export const drep_kind: (a: number) => number;
export const drep_as_key: (a: number) => number;
export const drep_as_script: (a: number) => number;
export const __wbg_ipv4_free: (a: number, b: number) => void;
export const ipv4_to_cbor_bytes: (a: number) => [number, number];
export const ipv4_to_canonical_cbor_bytes: (a: number) => [number, number];
export const ipv4_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const ipv4_to_cbor_hex: (a: number) => [number, number];
export const ipv4_to_canonical_cbor_hex: (a: number) => [number, number];
export const ipv4_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const ipv4_to_json: (a: number) => [number, number, number, number];
export const ipv4_to_js_value: (a: number) => [number, number, number];
export const ipv4_from_json: (a: number, b: number) => [number, number, number];
export const ipv4_get: (a: number) => [number, number];
export const __wbg_ipv6_free: (a: number, b: number) => void;
export const ipv6_to_cbor_bytes: (a: number) => [number, number];
export const ipv6_to_canonical_cbor_bytes: (a: number) => [number, number];
export const ipv6_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const ipv6_to_cbor_hex: (a: number) => [number, number];
export const ipv6_to_canonical_cbor_hex: (a: number) => [number, number];
export const ipv6_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const ipv6_to_json: (a: number) => [number, number, number, number];
export const ipv6_to_js_value: (a: number) => [number, number, number];
export const ipv6_from_json: (a: number, b: number) => [number, number, number];
export const ipv6_get: (a: number) => [number, number];
export const __wbg_multihostname_free: (a: number, b: number) => void;
export const multihostname_to_cbor_bytes: (a: number) => [number, number];
export const multihostname_to_canonical_cbor_bytes: (a: number) => [number, number];
export const multihostname_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const multihostname_to_cbor_hex: (a: number) => [number, number];
export const multihostname_to_canonical_cbor_hex: (a: number) => [number, number];
export const multihostname_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const multihostname_to_json: (a: number) => [number, number, number, number];
export const multihostname_to_js_value: (a: number) => [number, number, number];
export const multihostname_from_json: (a: number, b: number) => [number, number, number];
export const multihostname_dns_name: (a: number) => number;
export const multihostname_new: (a: number) => number;
export const __wbg_poolmetadata_free: (a: number, b: number) => void;
export const poolmetadata_to_cbor_bytes: (a: number) => [number, number];
export const poolmetadata_to_canonical_cbor_bytes: (a: number) => [number, number];
export const poolmetadata_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const poolmetadata_to_cbor_hex: (a: number) => [number, number];
export const poolmetadata_to_canonical_cbor_hex: (a: number) => [number, number];
export const poolmetadata_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const poolmetadata_to_json: (a: number) => [number, number, number, number];
export const poolmetadata_to_js_value: (a: number) => [number, number, number];
export const poolmetadata_from_json: (a: number, b: number) => [number, number, number];
export const poolmetadata_url: (a: number) => number;
export const poolmetadata_pool_metadata_hash: (a: number) => number;
export const poolmetadata_new: (a: number, b: number) => number;
export const __wbg_poolparams_free: (a: number, b: number) => void;
export const poolparams_to_cbor_bytes: (a: number) => [number, number];
export const poolparams_to_canonical_cbor_bytes: (a: number) => [number, number];
export const poolparams_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const poolparams_to_cbor_hex: (a: number) => [number, number];
export const poolparams_to_canonical_cbor_hex: (a: number) => [number, number];
export const poolparams_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const poolparams_to_json: (a: number) => [number, number, number, number];
export const poolparams_to_js_value: (a: number) => [number, number, number];
export const poolparams_from_json: (a: number, b: number) => [number, number, number];
export const poolparams_operator: (a: number) => number;
export const poolparams_vrf_keyhash: (a: number) => number;
export const poolparams_pledge: (a: number) => bigint;
export const poolparams_cost: (a: number) => bigint;
export const poolparams_margin: (a: number) => number;
export const poolparams_reward_account: (a: number) => number;
export const poolparams_pool_owners: (a: number) => number;
export const poolparams_relays: (a: number) => number;
export const poolparams_pool_metadata: (a: number) => number;
export const poolparams_new: (a: number, b: number, c: bigint, d: bigint, e: number, f: number, g: number, h: number, i: number) => number;
export const __wbg_poolregistration_free: (a: number, b: number) => void;
export const poolregistration_to_cbor_bytes: (a: number) => [number, number];
export const poolregistration_to_canonical_cbor_bytes: (a: number) => [number, number];
export const poolregistration_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const poolregistration_to_cbor_hex: (a: number) => [number, number];
export const poolregistration_to_canonical_cbor_hex: (a: number) => [number, number];
export const poolregistration_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const poolregistration_to_json: (a: number) => [number, number, number, number];
export const poolregistration_to_js_value: (a: number) => [number, number, number];
export const poolregistration_from_json: (a: number, b: number) => [number, number, number];
export const poolregistration_pool_params: (a: number) => number;
export const poolregistration_new: (a: number) => number;
export const __wbg_poolretirement_free: (a: number, b: number) => void;
export const poolretirement_to_cbor_bytes: (a: number) => [number, number];
export const poolretirement_to_canonical_cbor_bytes: (a: number) => [number, number];
export const poolretirement_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const poolretirement_to_cbor_hex: (a: number) => [number, number];
export const poolretirement_to_canonical_cbor_hex: (a: number) => [number, number];
export const poolretirement_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const poolretirement_to_json: (a: number) => [number, number, number, number];
export const poolretirement_to_js_value: (a: number) => [number, number, number];
export const poolretirement_from_json: (a: number, b: number) => [number, number, number];
export const poolretirement_pool: (a: number) => number;
export const poolretirement_epoch: (a: number) => bigint;
export const poolretirement_new: (a: number, b: bigint) => number;
export const __wbg_regcert_free: (a: number, b: number) => void;
export const regcert_to_cbor_bytes: (a: number) => [number, number];
export const regcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const regcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const regcert_to_cbor_hex: (a: number) => [number, number];
export const regcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const regcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const regcert_to_json: (a: number) => [number, number, number, number];
export const regcert_to_js_value: (a: number) => [number, number, number];
export const regcert_from_json: (a: number, b: number) => [number, number, number];
export const regcert_stake_credential: (a: number) => number;
export const regcert_deposit: (a: number) => bigint;
export const regcert_new: (a: number, b: bigint) => number;
export const __wbg_regdrepcert_free: (a: number, b: number) => void;
export const regdrepcert_to_cbor_bytes: (a: number) => [number, number];
export const regdrepcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const regdrepcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const regdrepcert_to_cbor_hex: (a: number) => [number, number];
export const regdrepcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const regdrepcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const regdrepcert_to_json: (a: number) => [number, number, number, number];
export const regdrepcert_to_js_value: (a: number) => [number, number, number];
export const regdrepcert_from_json: (a: number, b: number) => [number, number, number];
export const regdrepcert_drep_credential: (a: number) => number;
export const regdrepcert_deposit: (a: number) => bigint;
export const regdrepcert_anchor: (a: number) => number;
export const regdrepcert_new: (a: number, b: bigint, c: number) => number;
export const __wbg_relay_free: (a: number, b: number) => void;
export const relay_to_cbor_bytes: (a: number) => [number, number];
export const relay_to_canonical_cbor_bytes: (a: number) => [number, number];
export const relay_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const relay_to_cbor_hex: (a: number) => [number, number];
export const relay_to_canonical_cbor_hex: (a: number) => [number, number];
export const relay_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const relay_to_json: (a: number) => [number, number, number, number];
export const relay_to_js_value: (a: number) => [number, number, number];
export const relay_from_json: (a: number, b: number) => [number, number, number];
export const relay_new_single_host_addr: (a: number, b: number, c: number) => number;
export const relay_new_single_host_name: (a: number, b: number) => number;
export const relay_new_multi_host_name: (a: number) => number;
export const relay_kind: (a: number) => number;
export const relay_as_single_host_addr: (a: number) => number;
export const relay_as_single_host_name: (a: number) => number;
export const relay_as_multi_host_name: (a: number) => number;
export const __wbg_resigncommitteecoldcert_free: (a: number, b: number) => void;
export const resigncommitteecoldcert_to_cbor_bytes: (a: number) => [number, number];
export const resigncommitteecoldcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const resigncommitteecoldcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const resigncommitteecoldcert_to_cbor_hex: (a: number) => [number, number];
export const resigncommitteecoldcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const resigncommitteecoldcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const resigncommitteecoldcert_to_json: (a: number) => [number, number, number, number];
export const resigncommitteecoldcert_to_js_value: (a: number) => [number, number, number];
export const resigncommitteecoldcert_from_json: (a: number, b: number) => [number, number, number];
export const resigncommitteecoldcert_committee_cold_credential: (a: number) => number;
export const resigncommitteecoldcert_anchor: (a: number) => number;
export const resigncommitteecoldcert_new: (a: number, b: number) => number;
export const __wbg_singlehostaddr_free: (a: number, b: number) => void;
export const singlehostaddr_to_cbor_bytes: (a: number) => [number, number];
export const singlehostaddr_to_canonical_cbor_bytes: (a: number) => [number, number];
export const singlehostaddr_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const singlehostaddr_to_cbor_hex: (a: number) => [number, number];
export const singlehostaddr_to_canonical_cbor_hex: (a: number) => [number, number];
export const singlehostaddr_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const singlehostaddr_to_json: (a: number) => [number, number, number, number];
export const singlehostaddr_to_js_value: (a: number) => [number, number, number];
export const singlehostaddr_from_json: (a: number, b: number) => [number, number, number];
export const singlehostaddr_port: (a: number) => number;
export const singlehostaddr_ipv4: (a: number) => number;
export const singlehostaddr_ipv6: (a: number) => number;
export const singlehostaddr_new: (a: number, b: number, c: number) => number;
export const __wbg_singlehostname_free: (a: number, b: number) => void;
export const singlehostname_to_cbor_bytes: (a: number) => [number, number];
export const singlehostname_to_canonical_cbor_bytes: (a: number) => [number, number];
export const singlehostname_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const singlehostname_to_cbor_hex: (a: number) => [number, number];
export const singlehostname_to_canonical_cbor_hex: (a: number) => [number, number];
export const singlehostname_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const singlehostname_to_json: (a: number) => [number, number, number, number];
export const singlehostname_to_js_value: (a: number) => [number, number, number];
export const singlehostname_from_json: (a: number, b: number) => [number, number, number];
export const singlehostname_port: (a: number) => number;
export const singlehostname_dns_name: (a: number) => number;
export const singlehostname_new: (a: number, b: number) => number;
export const __wbg_stakedelegation_free: (a: number, b: number) => void;
export const stakedelegation_to_cbor_bytes: (a: number) => [number, number];
export const stakedelegation_to_canonical_cbor_bytes: (a: number) => [number, number];
export const stakedelegation_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakedelegation_to_cbor_hex: (a: number) => [number, number];
export const stakedelegation_to_canonical_cbor_hex: (a: number) => [number, number];
export const stakedelegation_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakedelegation_to_json: (a: number) => [number, number, number, number];
export const stakedelegation_to_js_value: (a: number) => [number, number, number];
export const stakedelegation_from_json: (a: number, b: number) => [number, number, number];
export const stakedelegation_stake_credential: (a: number) => number;
export const stakedelegation_pool: (a: number) => number;
export const stakedelegation_new: (a: number, b: number) => number;
export const __wbg_stakederegistration_free: (a: number, b: number) => void;
export const stakederegistration_to_cbor_bytes: (a: number) => [number, number];
export const stakederegistration_to_canonical_cbor_bytes: (a: number) => [number, number];
export const stakederegistration_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakederegistration_to_cbor_hex: (a: number) => [number, number];
export const stakederegistration_to_canonical_cbor_hex: (a: number) => [number, number];
export const stakederegistration_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakederegistration_to_json: (a: number) => [number, number, number, number];
export const stakederegistration_to_js_value: (a: number) => [number, number, number];
export const stakederegistration_from_json: (a: number, b: number) => [number, number, number];
export const stakederegistration_stake_credential: (a: number) => number;
export const stakederegistration_new: (a: number) => number;
export const __wbg_stakeregdelegcert_free: (a: number, b: number) => void;
export const stakeregdelegcert_to_cbor_bytes: (a: number) => [number, number];
export const stakeregdelegcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const stakeregdelegcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakeregdelegcert_to_cbor_hex: (a: number) => [number, number];
export const stakeregdelegcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const stakeregdelegcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakeregdelegcert_to_json: (a: number) => [number, number, number, number];
export const stakeregdelegcert_to_js_value: (a: number) => [number, number, number];
export const stakeregdelegcert_from_json: (a: number, b: number) => [number, number, number];
export const stakeregdelegcert_stake_credential: (a: number) => number;
export const stakeregdelegcert_pool: (a: number) => number;
export const stakeregdelegcert_deposit: (a: number) => bigint;
export const stakeregdelegcert_new: (a: number, b: number, c: bigint) => number;
export const __wbg_stakeregistration_free: (a: number, b: number) => void;
export const stakeregistration_to_cbor_bytes: (a: number) => [number, number];
export const stakeregistration_to_canonical_cbor_bytes: (a: number) => [number, number];
export const stakeregistration_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakeregistration_to_cbor_hex: (a: number) => [number, number];
export const stakeregistration_to_canonical_cbor_hex: (a: number) => [number, number];
export const stakeregistration_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakeregistration_to_json: (a: number) => [number, number, number, number];
export const stakeregistration_to_js_value: (a: number) => [number, number, number];
export const stakeregistration_from_json: (a: number, b: number) => [number, number, number];
export const stakeregistration_stake_credential: (a: number) => number;
export const stakeregistration_new: (a: number) => number;
export const __wbg_stakevotedelegcert_free: (a: number, b: number) => void;
export const stakevotedelegcert_to_cbor_bytes: (a: number) => [number, number];
export const stakevotedelegcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const stakevotedelegcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakevotedelegcert_to_cbor_hex: (a: number) => [number, number];
export const stakevotedelegcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const stakevotedelegcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakevotedelegcert_to_json: (a: number) => [number, number, number, number];
export const stakevotedelegcert_to_js_value: (a: number) => [number, number, number];
export const stakevotedelegcert_from_json: (a: number, b: number) => [number, number, number];
export const stakevotedelegcert_stake_credential: (a: number) => number;
export const stakevotedelegcert_pool: (a: number) => number;
export const stakevotedelegcert_d_rep: (a: number) => number;
export const stakevotedelegcert_new: (a: number, b: number, c: number) => number;
export const __wbg_stakevoteregdelegcert_free: (a: number, b: number) => void;
export const stakevoteregdelegcert_to_cbor_bytes: (a: number) => [number, number];
export const stakevoteregdelegcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const stakevoteregdelegcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const stakevoteregdelegcert_to_cbor_hex: (a: number) => [number, number];
export const stakevoteregdelegcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const stakevoteregdelegcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const stakevoteregdelegcert_to_json: (a: number) => [number, number, number, number];
export const stakevoteregdelegcert_to_js_value: (a: number) => [number, number, number];
export const stakevoteregdelegcert_from_json: (a: number, b: number) => [number, number, number];
export const stakevoteregdelegcert_stake_credential: (a: number) => number;
export const stakevoteregdelegcert_pool: (a: number) => number;
export const stakevoteregdelegcert_d_rep: (a: number) => number;
export const stakevoteregdelegcert_deposit: (a: number) => bigint;
export const stakevoteregdelegcert_new: (a: number, b: number, c: number, d: bigint) => number;
export const __wbg_unregcert_free: (a: number, b: number) => void;
export const unregcert_to_cbor_bytes: (a: number) => [number, number];
export const unregcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const unregcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const unregcert_to_cbor_hex: (a: number) => [number, number];
export const unregcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const unregcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const unregcert_to_json: (a: number) => [number, number, number, number];
export const unregcert_to_js_value: (a: number) => [number, number, number];
export const unregcert_from_json: (a: number, b: number) => [number, number, number];
export const unregcert_stake_credential: (a: number) => number;
export const unregcert_deposit: (a: number) => bigint;
export const unregcert_new: (a: number, b: bigint) => number;
export const __wbg_unregdrepcert_free: (a: number, b: number) => void;
export const unregdrepcert_to_cbor_bytes: (a: number) => [number, number];
export const unregdrepcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const unregdrepcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const unregdrepcert_to_cbor_hex: (a: number) => [number, number];
export const unregdrepcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const unregdrepcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const unregdrepcert_to_json: (a: number) => [number, number, number, number];
export const unregdrepcert_to_js_value: (a: number) => [number, number, number];
export const unregdrepcert_from_json: (a: number, b: number) => [number, number, number];
export const unregdrepcert_drep_credential: (a: number) => number;
export const unregdrepcert_deposit: (a: number) => bigint;
export const unregdrepcert_new: (a: number, b: bigint) => number;
export const __wbg_updatedrepcert_free: (a: number, b: number) => void;
export const updatedrepcert_to_cbor_bytes: (a: number) => [number, number];
export const updatedrepcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const updatedrepcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const updatedrepcert_to_cbor_hex: (a: number) => [number, number];
export const updatedrepcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const updatedrepcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const updatedrepcert_to_json: (a: number) => [number, number, number, number];
export const updatedrepcert_to_js_value: (a: number) => [number, number, number];
export const updatedrepcert_from_json: (a: number, b: number) => [number, number, number];
export const updatedrepcert_drep_credential: (a: number) => number;
export const updatedrepcert_anchor: (a: number) => number;
export const updatedrepcert_new: (a: number, b: number) => number;
export const __wbg_url_free: (a: number, b: number) => void;
export const url_to_cbor_bytes: (a: number) => [number, number];
export const url_to_canonical_cbor_bytes: (a: number) => [number, number];
export const url_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const url_to_cbor_hex: (a: number) => [number, number];
export const url_to_canonical_cbor_hex: (a: number) => [number, number];
export const url_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const url_to_json: (a: number) => [number, number, number, number];
export const url_to_js_value: (a: number) => [number, number, number];
export const url_from_json: (a: number, b: number) => [number, number, number];
export const url_get: (a: number) => [number, number];
export const __wbg_votedelegcert_free: (a: number, b: number) => void;
export const votedelegcert_to_cbor_bytes: (a: number) => [number, number];
export const votedelegcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const votedelegcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const votedelegcert_to_cbor_hex: (a: number) => [number, number];
export const votedelegcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const votedelegcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const votedelegcert_to_json: (a: number) => [number, number, number, number];
export const votedelegcert_to_js_value: (a: number) => [number, number, number];
export const votedelegcert_from_json: (a: number, b: number) => [number, number, number];
export const votedelegcert_stake_credential: (a: number) => number;
export const votedelegcert_d_rep: (a: number) => number;
export const votedelegcert_new: (a: number, b: number) => number;
export const __wbg_voteregdelegcert_free: (a: number, b: number) => void;
export const voteregdelegcert_to_cbor_bytes: (a: number) => [number, number];
export const voteregdelegcert_to_canonical_cbor_bytes: (a: number) => [number, number];
export const voteregdelegcert_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const voteregdelegcert_to_cbor_hex: (a: number) => [number, number];
export const voteregdelegcert_to_canonical_cbor_hex: (a: number) => [number, number];
export const voteregdelegcert_from_cbor_hex: (a: number, b: number) => [number, number, number];
export const voteregdelegcert_to_json: (a: number) => [number, number, number, number];
export const voteregdelegcert_to_js_value: (a: number) => [number, number, number];
export const voteregdelegcert_from_json: (a: number, b: number) => [number, number, number];
export const voteregdelegcert_stake_credential: (a: number) => number;
export const voteregdelegcert_d_rep: (a: number) => number;
export const voteregdelegcert_deposit: (a: number) => bigint;
export const voteregdelegcert_new: (a: number, b: number, c: bigint) => number;
export const get_implicit_input: (a: number, b: bigint, c: bigint) => [number, number, number];
export const get_deposit: (a: number, b: bigint, c: bigint) => [bigint, number, number];
export const encode_json_str_to_metadatum: (a: number, b: number, c: number) => [number, number, number];
export const decode_metadatum_to_json_str: (a: number, b: number) => [number, number, number, number];
export const encode_json_str_to_plutus_datum: (a: number, b: number, c: number) => [number, number, number];
export const decode_plutus_datum_to_json_str: (a: number, b: number) => [number, number, number, number];
export const min_ada_required: (a: number, b: bigint) => [bigint, number, number];
export const transactionoutput_new: (a: number, b: number, c: number, d: number) => number;
export const transactionoutput_address: (a: number) => number;
export const transactionoutput_set_address: (a: number, b: number) => void;
export const transactionoutput_amount: (a: number) => number;
export const transactionoutput_set_amount: (a: number, b: number) => void;
export const transactionoutput_datum: (a: number) => number;
export const transactionoutput_datum_hash: (a: number) => number;
export const transactionoutput_script_ref: (a: number) => number;
export const nativescript_get_required_signers: (a: number) => number;
export const nativescript_hash: (a: number) => number;
export const nativescript_verify: (a: number, b: number, c: bigint, d: number, e: bigint, f: number) => number;
export const transactionwitnessset_add_all_witnesses: (a: number, b: number) => void;
export const transactionwitnessset_languages: (a: number) => number;
export const __wbg_bip32privatekey_free: (a: number, b: number) => void;
export const bip32privatekey_derive: (a: number, b: number) => number;
export const bip32privatekey_from_128_xprv: (a: number, b: number) => [number, number, number];
export const bip32privatekey_to_128_xprv: (a: number) => [number, number];
export const bip32privatekey_generate_ed25519_bip32: () => number;
export const bip32privatekey_to_raw_key: (a: number) => number;
export const bip32privatekey_to_public: (a: number) => number;
export const bip32privatekey_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const bip32privatekey_to_raw_bytes: (a: number) => [number, number];
export const bip32privatekey_from_bech32: (a: number, b: number) => [number, number, number];
export const bip32privatekey_to_bech32: (a: number) => [number, number];
export const bip32privatekey_from_bip39_entropy: (a: number, b: number, c: number, d: number) => number;
export const bip32privatekey_chaincode: (a: number) => [number, number];
export const __wbg_bip32publickey_free: (a: number, b: number) => void;
export const bip32publickey_derive: (a: number, b: number) => [number, number, number];
export const bip32publickey_to_raw_key: (a: number) => number;
export const bip32publickey_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const bip32publickey_to_raw_bytes: (a: number) => [number, number];
export const bip32publickey_from_bech32: (a: number, b: number) => [number, number, number];
export const bip32publickey_to_bech32: (a: number) => [number, number];
export const bip32publickey_chaincode: (a: number) => [number, number];
export const __wbg_privatekey_free: (a: number, b: number) => void;
export const privatekey_to_public: (a: number) => number;
export const privatekey_generate_ed25519: () => number;
export const privatekey_generate_ed25519extended: () => number;
export const privatekey_from_bech32: (a: number, b: number) => [number, number, number];
export const privatekey_to_bech32: (a: number) => [number, number];
export const privatekey_to_raw_bytes: (a: number) => [number, number];
export const privatekey_from_extended_bytes: (a: number, b: number) => [number, number, number];
export const privatekey_from_normal_bytes: (a: number, b: number) => [number, number, number];
export const privatekey_sign: (a: number, b: number, c: number) => number;
export const __wbg_publickey_free: (a: number, b: number) => void;
export const publickey_from_bech32: (a: number, b: number) => [number, number, number];
export const publickey_to_bech32: (a: number) => [number, number];
export const publickey_to_raw_bytes: (a: number) => [number, number];
export const publickey_from_bytes: (a: number, b: number) => [number, number, number];
export const publickey_verify: (a: number, b: number, c: number, d: number) => number;
export const publickey_hash: (a: number) => number;
export const __wbg_ed25519signature_free: (a: number, b: number) => void;
export const ed25519signature_to_bech32: (a: number) => [number, number];
export const ed25519signature_from_bech32: (a: number, b: number) => [number, number, number];
export const ed25519signature_to_raw_bytes: (a: number) => [number, number];
export const ed25519signature_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const ed25519signature_to_hex: (a: number) => [number, number];
export const ed25519signature_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_ed25519keyhash_free: (a: number, b: number) => void;
export const ed25519keyhash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const ed25519keyhash_from_bech32: (a: number, b: number) => [number, number, number];
export const ed25519keyhash_to_raw_bytes: (a: number) => [number, number];
export const ed25519keyhash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const ed25519keyhash_to_hex: (a: number) => [number, number];
export const ed25519keyhash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_scripthash_free: (a: number, b: number) => void;
export const scripthash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const scripthash_from_bech32: (a: number, b: number) => [number, number, number];
export const scripthash_to_raw_bytes: (a: number) => [number, number];
export const scripthash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const scripthash_to_hex: (a: number) => [number, number];
export const scripthash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_transactionhash_free: (a: number, b: number) => void;
export const transactionhash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const transactionhash_from_bech32: (a: number, b: number) => [number, number, number];
export const transactionhash_to_raw_bytes: (a: number) => [number, number];
export const transactionhash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const transactionhash_to_hex: (a: number) => [number, number];
export const transactionhash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_genesisdelegatehash_free: (a: number, b: number) => void;
export const genesisdelegatehash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const genesisdelegatehash_from_bech32: (a: number, b: number) => [number, number, number];
export const genesisdelegatehash_to_raw_bytes: (a: number) => [number, number];
export const genesisdelegatehash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const genesisdelegatehash_to_hex: (a: number) => [number, number];
export const genesisdelegatehash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_genesishash_free: (a: number, b: number) => void;
export const genesishash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const genesishash_from_bech32: (a: number, b: number) => [number, number, number];
export const genesishash_to_raw_bytes: (a: number) => [number, number];
export const genesishash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const genesishash_to_hex: (a: number) => [number, number];
export const genesishash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_auxiliarydatahash_free: (a: number, b: number) => void;
export const auxiliarydatahash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const auxiliarydatahash_from_bech32: (a: number, b: number) => [number, number, number];
export const auxiliarydatahash_to_raw_bytes: (a: number) => [number, number];
export const auxiliarydatahash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const auxiliarydatahash_to_hex: (a: number) => [number, number];
export const auxiliarydatahash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_poolmetadatahash_free: (a: number, b: number) => void;
export const poolmetadatahash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const poolmetadatahash_from_bech32: (a: number, b: number) => [number, number, number];
export const poolmetadatahash_to_raw_bytes: (a: number) => [number, number];
export const poolmetadatahash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const poolmetadatahash_to_hex: (a: number) => [number, number];
export const poolmetadatahash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_vrfkeyhash_free: (a: number, b: number) => void;
export const vrfkeyhash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const vrfkeyhash_from_bech32: (a: number, b: number) => [number, number, number];
export const vrfkeyhash_to_raw_bytes: (a: number) => [number, number];
export const vrfkeyhash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const vrfkeyhash_to_hex: (a: number) => [number, number];
export const vrfkeyhash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_blockbodyhash_free: (a: number, b: number) => void;
export const blockbodyhash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const blockbodyhash_from_bech32: (a: number, b: number) => [number, number, number];
export const blockbodyhash_to_raw_bytes: (a: number) => [number, number];
export const blockbodyhash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const blockbodyhash_to_hex: (a: number) => [number, number];
export const blockbodyhash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_blockheaderhash_free: (a: number, b: number) => void;
export const blockheaderhash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const blockheaderhash_from_bech32: (a: number, b: number) => [number, number, number];
export const blockheaderhash_to_raw_bytes: (a: number) => [number, number];
export const blockheaderhash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const blockheaderhash_to_hex: (a: number) => [number, number];
export const blockheaderhash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_datumhash_free: (a: number, b: number) => void;
export const datumhash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const datumhash_from_bech32: (a: number, b: number) => [number, number, number];
export const datumhash_to_raw_bytes: (a: number) => [number, number];
export const datumhash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const datumhash_to_hex: (a: number) => [number, number];
export const datumhash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_scriptdatahash_free: (a: number, b: number) => void;
export const scriptdatahash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const scriptdatahash_from_bech32: (a: number, b: number) => [number, number, number];
export const scriptdatahash_to_raw_bytes: (a: number) => [number, number];
export const scriptdatahash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const scriptdatahash_to_hex: (a: number) => [number, number];
export const scriptdatahash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_vrfvkey_free: (a: number, b: number) => void;
export const vrfvkey_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const vrfvkey_from_bech32: (a: number, b: number) => [number, number, number];
export const vrfvkey_to_raw_bytes: (a: number) => [number, number];
export const vrfvkey_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const vrfvkey_to_hex: (a: number) => [number, number];
export const vrfvkey_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_kesvkey_free: (a: number, b: number) => void;
export const kesvkey_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const kesvkey_from_bech32: (a: number, b: number) => [number, number, number];
export const kesvkey_to_raw_bytes: (a: number) => [number, number];
export const kesvkey_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const kesvkey_to_hex: (a: number) => [number, number];
export const kesvkey_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_noncehash_free: (a: number, b: number) => void;
export const noncehash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const noncehash_from_bech32: (a: number, b: number) => [number, number, number];
export const noncehash_to_raw_bytes: (a: number) => [number, number];
export const noncehash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const noncehash_to_hex: (a: number) => [number, number];
export const noncehash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_anchordochash_free: (a: number, b: number) => void;
export const anchordochash_to_bech32: (a: number, b: number, c: number) => [number, number, number, number];
export const anchordochash_from_bech32: (a: number, b: number) => [number, number, number];
export const anchordochash_to_raw_bytes: (a: number) => [number, number];
export const anchordochash_from_raw_bytes: (a: number, b: number) => [number, number, number];
export const anchordochash_to_hex: (a: number) => [number, number];
export const anchordochash_from_hex: (a: number, b: number) => [number, number, number];
export const __wbg_legacydaedalusprivatekey_free: (a: number, b: number) => void;
export const legacydaedalusprivatekey_chaincode: (a: number) => [number, number];
export const emip3_encrypt_with_password: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number, number, number];
export const emip3_decrypt_with_password: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const __wbg_int_free: (a: number, b: number) => void;
export const int_to_cbor_bytes: (a: number) => [number, number];
export const int_from_cbor_bytes: (a: number, b: number) => [number, number, number];
export const int_to_json: (a: number) => [number, number, number, number];
export const int_to_json_value: (a: number) => [number, number, number];
export const int_from_json: (a: number, b: number) => [number, number, number];
export const int_new: (a: bigint) => number;
export const int_to_str: (a: number) => [number, number];
export const int_from_str: (a: number, b: number) => [number, number, number];
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_4: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
